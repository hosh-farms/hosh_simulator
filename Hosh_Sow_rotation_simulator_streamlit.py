# -*- coding: utf-8 -*-
"""Sow_rotation_simulator_streamLIT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fyd_o9L_echo9pJ-I4sJ_hu5fPD1SEno
"""

import streamlit as st
import pandas as pd
import numpy as np

def sow_rotation_simulator_with_stages(
    total_sows=30,
    piglets_per_cycle=8,
    sow_mortality=0.033,
    piglet_mortality=0.03,
    sow_feed_price=32,
    sow_feed_intake=2.8,
    grower_feed_price=28,
    fcr=3.2,
    final_weight=105,
    sale_price=180,
    management_fee=50000,
    management_commission=0.05,
    supervisor_salary=25000,
    worker_salary=18000,
    n_workers=2,
    shed_cost=1_000_000,
    shed_life_years=10,
    sow_cost=1_050_000,
    sow_life_years=4,
    loan_amount=0,
    interest_rate=0.1,
    loan_tenure_years=5,
    moratorium_months=0,
    medicine_cost=10000,
    electricity_cost=5000,
    land_lease=10000,
    months=60,
    abortion_rate=0.03
):
    current_sows = total_sows
    monthly_data = []

    # Depreciation
    shed_dep_rate = 1 / (shed_life_years * 12)
    sow_dep_rate = 1 / (sow_life_years * 12)

    # Loan calculation
    total_months = loan_tenure_years * 12
    monthly_rate = interest_rate / 12
    emi = 0
    if loan_amount > 0 and total_months > 0:
        emi = loan_amount * monthly_rate * (1 + monthly_rate)**total_months / ((1 + monthly_rate)**total_months - 1)
    loan_balance = loan_amount

    # Calculate sows to mate dynamically
    average_cycle_length = 3.8 + 1.3 + 0.33
    sows_to_mate_per_month = total_sows / average_cycle_length

    batches = []
    ready_for_sale_batches = []
    total_capital_invested = shed_cost + sow_cost
    cumulative_cash_flow = -total_capital_invested

    for month in range(1, months + 1):
        sows_mated_this_month = 0
        sows_aborted_this_month = 0
        sow_mortality_this_month = 0

        sow_feed_cost = current_sows * sow_feed_intake * 30 * sow_feed_price
        staff_cost = supervisor_salary + n_workers * worker_salary
        mgmt_fixed = management_fee

        # Mate sows from month 2
        if month >= 2:
            sows_to_mate = sows_to_mate_per_month
            sows_mated_this_month = sows_to_mate
            sows_pregnant = sows_to_mate * (1 - abortion_rate)
            sows_aborted_this_month = sows_to_mate - sows_pregnant

            sow_mortality_this_month = current_sows * (sow_mortality / 12)
            current_sows -= sow_mortality_this_month

            if sows_pregnant > 0:
                farrow_month = month + 4
                wean_month = farrow_month + 1
                grower_start_month = wean_month
                grower_end_month = grower_start_month + 6
                piglets = sows_pregnant * piglets_per_cycle * (1 - piglet_mortality)
                batches.append({
                    'batch_id': len(batches) + 1,
                    'farrow_month': farrow_month,
                    'wean_month': wean_month,
                    'grower_start_month': grower_start_month,
                    'grower_end_month': grower_end_month,
                    'piglets': piglets,
                    'grower_feed_per_month': (piglets * fcr * final_weight) / 6
                })

        piglets_with_sow = 0
        current_growers = 0
        sold_pigs = 0
        revenue = 0
        grower_feed_cost = 0
        batches_to_remove_permanently = []

        batches_this_month = batches.copy()

        for batch in batches_this_month:
            if batch['farrow_month'] <= month < batch['wean_month']:
                piglets_with_sow += batch['piglets']
            if batch['grower_start_month'] <= month < batch['grower_end_month']:
                current_growers += batch['piglets']
                grower_feed_cost += batch['grower_feed_per_month'] * grower_feed_price
            if batch['grower_end_month'] == month:
                ready_for_sale_batches.append(batch)

        # Bimonthly sale from month 13
        if month >= 13 and (month - 13) % 2 == 0 and ready_for_sale_batches:
            pigs_sold_this_period = 0
            batches_sold_this_period_ids = []
            sale_period_start_month = month - 1 if month > 13 else 13
            sale_period_end_month = month
            batches_to_sell_in_this_period = [batch for batch in ready_for_sale_batches if sale_period_start_month <= batch['grower_end_month'] <= sale_period_end_month]

            for batch_to_sell in batches_to_sell_in_this_period:
                pigs_sold_batch = batch_to_sell['piglets'] * (1 - 0.03)
                pigs_sold_this_period += pigs_sold_batch
                batches_sold_this_period_ids.append(batch_to_sell['batch_id'])

            revenue += pigs_sold_this_period * final_weight * sale_price
            sold_pigs = pigs_sold_this_period
            ready_for_sale_batches = [batch for batch in ready_for_sale_batches if batch['batch_id'] not in batches_sold_this_period_ids]
            for batch_id in batches_sold_this_period_ids:
                for batch in batches:
                    if batch['batch_id'] == batch_id:
                        batches_to_remove_permanently.append(batch)
                        break

        # Handle final month sale
        if month == months and batches:
            pigs_sold_this_period = 0
            batches_sold_this_period_ids = []
            for batch in batches:
                pigs_sold_batch = batch['piglets'] * (1 - 0.03)
                pigs_sold_this_period += pigs_sold_batch
                batches_sold_this_period_ids.append(batch['batch_id'])

            last_month_grower_revenue = pigs_sold_this_period * final_weight * sale_price
            revenue += last_month_grower_revenue
            sold_pigs += pigs_sold_this_period
            for batch_id in batches_sold_this_period_ids:
                for batch in batches:
                    if batch['batch_id'] == batch_id:
                        batches_to_remove_permanently.append(batch)
                        break

        for batch in batches_to_remove_permanently:
            if batch in batches:
                batches.remove(batch)

        current_growers -= sold_pigs

        mgmt_comm_cost = revenue * management_commission
        other_fixed = medicine_cost + electricity_cost + land_lease
        total_operating_cost = sow_feed_cost + grower_feed_cost + staff_cost + mgmt_fixed + mgmt_comm_cost + other_fixed
        dep = (shed_cost * shed_dep_rate) + (sow_cost * sow_dep_rate)

        if month <= moratorium_months:
            loan_payment = loan_balance * monthly_rate
        elif month <= total_months:
            interest = loan_balance * monthly_rate
            principal = emi - interest
            loan_balance -= principal
            loan_payment = emi
        else:
            loan_payment = 0

        monthly_profit = revenue - total_operating_cost - dep - loan_payment
        monthly_profit_percentage = (monthly_profit / revenue * 100) if revenue > 0 else 0
        monthly_cash_flow = revenue - total_operating_cost - loan_payment
        cumulative_cash_flow += monthly_cash_flow

        monthly_data.append({
            'Month': month,
            'Piglets_Born_Alive': piglets_with_sow,
            'Growers': current_growers,
            'Sold_Pigs': sold_pigs,
            'Sows_Mated': sows_mated_this_month,
            'Revenue': round(revenue),
            'Sow_Feed_Cost': round(sow_feed_cost),
            'Grower_Feed_Cost': round(grower_feed_cost),
            'Staff_Cost': round(staff_cost),
            'Mgmt_Fee': round(mgmt_fixed),
            'Mgmt_Comm': round(mgmt_comm_cost),
            'Other_Fixed_Costs': round(other_fixed),
            'Total_Operating_Cost': round(total_operating_cost),
            'Depreciation': round(dep),
            'Loan_EMI': round(loan_payment),
            'Monthly_Profit': round(monthly_profit),
            'Monthly_Profit_%': monthly_profit_percentage,
            'Monthly_Cash_Flow': round(monthly_cash_flow),
            'Cumulative_Cash_Flow': round(cumulative_cash_flow)
        })

    df_month = pd.DataFrame(monthly_data)
    df_month['Year'] = ((df_month['Month'] - 1) // 12) + 1

    # Yearly summary
    cols_to_sum = ['Revenue','Sow_Feed_Cost','Grower_Feed_Cost','Staff_Cost','Mgmt_Fee','Mgmt_Comm',
                   'Other_Fixed_Costs','Total_Operating_Cost','Depreciation','Loan_EMI', 'Piglets_Born_Alive', 'Sold_Pigs', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Sows_Mated']
    df_year = df_month.groupby('Year')[cols_to_sum].sum()
    growers_end_of_year = df_month.groupby('Year')['Growers'].tail(1).values
    df_year['Growers'] = growers_end_of_year
    cumulative_cash_flow_end_of_year = df_month.groupby('Year')['Cumulative_Cash_Flow'].tail(1).values
    df_year['Cumulative_Cash_Flow'] = cumulative_cash_flow_end_of_year
    df_year.index = [f'Year {i}' for i in df_year.index]
    df_year['Cash_Profit'] = df_year['Revenue'] - df_year['Total_Operating_Cost']
    df_year['Profit_After_Dep_Loan'] = df_year['Cash_Profit'] - df_year['Depreciation'] - df_year['Loan_EMI']

    return df_month, df_year, total_capital_invested, cumulative_cash_flow

# UI
st.title('üê∑ House of Supreme Ham Simulator')
st.sidebar.header('Simulation Parameters')

total_sows = st.sidebar.slider('Total Sows', 10, 200, 30, 5)
piglets_per_cycle = st.sidebar.slider('Piglets Per Cycle', 5.0, 15.0, 8.0, 0.1)
sow_mortality = st.sidebar.slider('Sow Mortality Rate', 0.0, 0.5, 0.033, 0.001, format="%.3f")
piglet_mortality = st.sidebar.slider('Piglet Mortality Rate', 0.0, 0.5, 0.03, 0.001, format="%.3f")
abortion_rate = st.sidebar.slider('Abortion Rate', 0.0, 0.5, 0.03, 0.001, format="%.3f")
months = st.sidebar.slider('Simulation Duration (Months)', 12, 120, 60, 12)

df_month, df_year, invested, cum_cf = sow_rotation_simulator_with_stages(
    total_sows=total_sows,
    piglets_per_cycle=piglets_per_cycle,
    sow_mortality=sow_mortality,
    piglet_mortality=piglet_mortality,
    months=months,
    abortion_rate=abortion_rate
)

st.subheader("Monthly Summary")
st.dataframe(df_month)

st.subheader("Yearly Summary")
st.dataframe(df_year)

st.subheader("Financial Summary")
st.write(f"Total Capital Invested: ‚Çπ{invested:,.2f}")
st.write(f"Cumulative Cash Flow: ‚Çπ{cum_cf:,.2f}")



!pip install streamlit pandas