# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UWEsMn7i43B1rbEd5X261flfeGxh6f0F
"""

import pandas as pd
import numpy as np

def sow_rotation_simulator_with_stages(
    total_sows=30,
    piglets_per_cycle=8,
    sow_mortality=0.033,
    piglet_mortality=0.03,
    sow_feed_price=32,
    sow_feed_intake=2.8,
    grower_feed_price=28,
    fcr=3.2,
    final_weight=105,
    sale_price=180,
    management_fee=50000,
    management_commission=0.05,
    supervisor_salary=25000,
    worker_salary=18000,
    n_workers=2,
    shed_cost=1_000_000,
    shed_life_years=10,
    sow_cost=1_050_000,
    sow_life_years=4,
    loan_amount=0,
    interest_rate=0.1,
    loan_tenure_years=5,
    moratorium_months=0,
    medicine_cost=10000,
    electricity_cost=5000,
    land_lease=10000,
    months=60,
    abortion_rate=0.03
):
    current_sows = total_sows
    monthly_data = []

    # Depreciation
    shed_dep = shed_cost / (shed_life_years * 12)
    sow_dep_total = sow_cost / (sow_life_years * 12)

    # Loan calculation
    total_months = loan_tenure_years * 12
    monthly_rate = interest_rate / 12
    emi = 0
    if loan_amount > 0 and total_months > 0:
        emi = loan_amount * monthly_rate * (1 + monthly_rate)**total_months / ((1 + monthly_rate)**total_months - 1)
    loan_balance = loan_amount

    # Calculate sows to mate dynamically
    # Assuming average cycle length = Gestation (3.8 months) + Lactation (1.3 months) + Dry period (0.33 months) = 5.43 months
    average_cycle_length = 3.8 + 1.3 + 0.33
    sows_to_mate_per_month = total_sows / average_cycle_length


    batches = []

    # Calculate total capital invested
    total_capital_invested = shed_cost + sow_cost
    cumulative_cash_flow = -total_capital_invested # Start with initial investment as negative cash flow


    for month in range(1, months + 1):
        sow_feed_cost = current_sows * sow_feed_intake * 30 * sow_feed_price
        staff_cost = supervisor_salary + n_workers * worker_salary
        mgmt_fixed = management_fee

        # Mate sows based on dynamic calculation and abortion rate
        sows_to_mate = round(sows_to_mate_per_month) # Round to the nearest whole number of sows to mate
        sows_pregnant = round(sows_to_mate * (1 - abortion_rate))


        if sows_pregnant > 0:
            farrow_month = month + 4
            wean_month = farrow_month + 1
            grower_start_month = wean_month
            grower_end_month = grower_start_month + 6
            piglets = sows_pregnant * piglets_per_cycle * (1 - piglet_mortality)
            batches.append({
                'farrow_month': farrow_month,
                'wean_month': wean_month,
                'grower_start_month': grower_start_month,
                'grower_end_month': grower_end_month,
                'piglets': piglets,
                'grower_feed_per_month': (piglets * fcr * final_weight) / 6
            })

        # Initialize counters
        piglets_with_sow = 0
        growers = 0
        sold_pigs = 0
        revenue = 0
        grower_feed_cost = 0

        for batch in batches:
            # Piglets in lactation
            if batch['farrow_month'] <= month < batch['wean_month']:
                piglets_with_sow += batch['piglets']
            # Growers
            if batch['grower_start_month'] <= month < batch['grower_end_month']:
                growers += batch['piglets']
                grower_feed_cost += batch['grower_feed_per_month'] * grower_feed_price
            # Sold this month
            if batch['grower_end_month'] == month:
                pigs_sold = batch['piglets'] * (1 - 0.03)
                revenue += pigs_sold * final_weight * sale_price
                sold_pigs += pigs_sold

        # Subtract sold pigs from growers for this month
        growers -= sold_pigs


        mgmt_comm_cost = revenue * management_commission
        other_fixed = medicine_cost + electricity_cost + land_lease
        total_operating_cost = sow_feed_cost + grower_feed_cost + staff_cost + mgmt_fixed + mgmt_comm_cost + other_fixed
        dep = shed_dep + sow_dep_total

        # Loan EMI
        if month <= moratorium_months:
            loan_payment = loan_balance * monthly_rate
        elif month <= total_months:
            interest = loan_balance * monthly_rate
            principal = emi - interest
            loan_balance -= principal
            loan_payment = emi
        else:
            loan_payment = 0

        monthly_profit = revenue - total_operating_cost - dep - loan_payment
        monthly_profit_percentage = (monthly_profit / revenue * 100) if revenue > 0 else 0

        # Calculate monthly cash flow (excluding depreciation)
        monthly_cash_flow = revenue - total_operating_cost - loan_payment
        cumulative_cash_flow += monthly_cash_flow


        monthly_data.append({
            'Month': month,
            'Piglets_Born_Alive': piglets_with_sow,
            'Growers': growers,
            'Sold_Pigs': sold_pigs,
            'Revenue': round(revenue),
            'Sow_Feed_Cost': round(sow_feed_cost),
            'Grower_Feed_Cost': round(grower_feed_cost),
            'Staff_Cost': round(staff_cost),
            'Mgmt_Fee': round(mgmt_fixed),
            'Mgmt_Comm': round(mgmt_comm_cost),
            'Other_Fixed_Costs': round(other_fixed),
            'Total_Operating_Cost': round(total_operating_cost),
            'Depreciation': round(dep),
            'Loan_EMI': round(loan_payment),
            'Monthly_Profit': round(monthly_profit),
            'Monthly_Profit_%': monthly_profit_percentage,
            'Monthly_Cash_Flow': round(monthly_cash_flow),
            'Cumulative_Cash_Flow': round(cumulative_cash_flow)
        })

       # current_sows -= current_sows * sow_mortality / 12

    df_month = pd.DataFrame(monthly_data)
    df_month['Year'] = ((df_month['Month'] - 1) // 12) + 1


    # Monthly summary - Apply styling after all calculations
    df_month_styled = df_month.style

    # Yearly summary
    cols_to_sum = ['Revenue','Sow_Feed_Cost','Grower_Feed_Cost','Staff_Cost','Mgmt_Fee','Mgmt_Comm',
                   'Other_Fixed_Costs','Total_Operating_Cost','Depreciation','Loan_EMI', 'Piglets_Born_Alive', 'Sold_Pigs', 'Monthly_Profit', 'Monthly_Cash_Flow']

    df_year = df_month.groupby('Year')[cols_to_sum].sum()

    # Get the 'Growers' value from the last month of each year
    growers_end_of_year = df_month.groupby('Year')['Growers'].tail(1).values
    df_year['Growers'] = growers_end_of_year

    # Get the 'Cumulative_Cash_Flow' value from the last month of each year
    cumulative_cash_flow_end_of_year = df_month.groupby('Year')['Cumulative_Cash_Flow'].tail(1).values
    df_year['Cumulative_Cash_Flow'] = cumulative_cash_flow_end_of_year


    df_year.index = [f'Year {i}' for i in df_year.index]
    df_year['Cash_Profit'] = df_year['Revenue'] - df_year['Total_Operating_Cost']
    df_year['Profit_After_Dep_Loan'] = df_year['Cash_Profit'] - df_year['Depreciation'] - df_year['Loan_EMI']
    df_year['Cash_Profit_%'] = (df_year['Cash_Profit'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
    df_year['Profit_After_Dep_Loan_%'] = (df_year['Profit_After_Dep_Loan'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0


    # Add Total Capital Invested column
    df_year['Total Capital Invested'] = total_capital_invested

    return df_month_styled, df_year, total_capital_invested, cumulative_cash_flow

df_month_styled, df_year, total_capital_invested, cumulative_cash_flow_end = sow_rotation_simulator_with_stages(months=84, abortion_rate=0.1)
display(df_month_styled)  # Monthly table with piglets in lactation, growers, sold highlighted
display(df_year)  # Yearly summary

print(f"Total amount invested: {total_capital_invested}")
print(f"Total return after 7 years: {cumulative_cash_flow_end}")

# Calculate ROI
roi = (cumulative_cash_flow_end / total_capital_invested) * 100

print(f"Total Capital Initially Invested (Shed + Sows): {total_capital_invested}")
# Assuming cumulative_cash_flow_end already accounts for initial investment being negative
print(f"Total Return after 7 years: {cumulative_cash_flow_end}")
print(f"Return on Investment (ROI) after 7 years: {roi:.2f}%")

import pandas as pd
import numpy as np

def sow_rotation_simulator_with_stages(
    total_sows=30,
    piglets_per_cycle=8,
    sow_mortality=0.033,
    piglet_mortality=0.03,
    sow_feed_price=32,
    sow_feed_intake=2.8,
    grower_feed_price=28,
    fcr=3.2,
    final_weight=105,
    sale_price=180,
    management_fee=50000,
    management_commission=0.05,
    supervisor_salary=25000,
    worker_salary=18000,
    n_workers=2,
    shed_cost=1_000_000,
    shed_life_years=10,
    sow_cost=1_050_000,
    sow_life_years=4,
    loan_amount=0,
    interest_rate=0.1,
    loan_tenure_years=5,
    moratorium_months=0,
    medicine_cost=10000,
    electricity_cost=5000,
    land_lease=10000,
    months=60,
    abortion_rate=0.03
):
    current_sows = total_sows
    monthly_data = []

    # Depreciation
    shed_dep_rate = 1 / (shed_life_years * 12)
    sow_dep_rate = 1 / (sow_life_years * 12)

    # Loan calculation
    total_months = loan_tenure_years * 12
    monthly_rate = interest_rate / 12
    emi = 0
    if loan_amount > 0 and total_months > 0:
        emi = loan_amount * monthly_rate * (1 + monthly_rate)**total_months / ((1 + monthly_rate)**total_months - 1)
    loan_balance = loan_amount

    # Calculate sows to mate dynamically
    # Assuming average cycle length = Gestation (3.8 months) + Lactation (1.3 months) + Dry period (0.33 months) = 5.43 months
    average_cycle_length = 3.8 + 1.3 + 0.33
    sows_to_mate_per_month = total_sows / average_cycle_length

    batches = []
    ready_for_sale_batches = [] # To temporarily hold batches ready for sale

    # Calculate total capital invested
    total_capital_invested = shed_cost + sow_cost
    cumulative_cash_flow = -total_capital_invested # Start with initial investment as negative cash flow

    for month in range(1, months + 1):
        # Initialize monthly counters for sow events
        sows_mated_this_month = 0
        sows_aborted_this_month = 0
        sow_mortality_this_month = 0

        sow_feed_cost = current_sows * sow_feed_intake * 30 * sow_feed_price
        staff_cost = supervisor_salary + n_workers * worker_salary
        mgmt_fixed = management_fee

        # Mate sows based on dynamic calculation and abortion rate, starting from month 2
        if month >= 2:
            sows_to_mate = sows_to_mate_per_month # Keep as decimal
            sows_mated_this_month = sows_to_mate # Track sows mated
            sows_pregnant = sows_to_mate * (1 - abortion_rate) # Keep as decimal
            sows_aborted_this_month = sows_to_mate - sows_pregnant # Track abortions

            # Sow mortality (calculated monthly)
            sow_mortality_this_month = current_sows * (sow_mortality / 12)
            current_sows -= sow_mortality_this_month # Reduce current sows due to mortality


            if sows_pregnant > 0:
                farrow_month = month + 4
                wean_month = farrow_month + 1
                grower_start_month = wean_month
                grower_end_month = grower_start_month + 6 # Grower period is 6 months
                piglets = sows_pregnant * piglets_per_cycle * (1 - piglet_mortality)
                batches.append({
                    'batch_id': len(batches) + 1, # Assign a unique ID to each batch
                    'farrow_month': farrow_month,
                    'wean_month': wean_month,
                    'grower_start_month': grower_start_month,
                    'grower_end_month': grower_end_month,
                    'piglets': piglets,
                    'grower_feed_per_month': (piglets * fcr * final_weight) / 6 # Feed for 6 months
                })

        # Initialize counters for the current month (other than sow events)
        piglets_with_sow = 0
        current_growers = 0
        sold_pigs = 0
        revenue = 0
        grower_feed_cost = 0

        batches_to_remove_permanently = [] # Batches that are sold are removed permanently


        # Identify batches currently in different stages and sum up counts/costs
        batches_this_month = batches.copy() # Work on a copy to avoid issues while removing

        for batch in batches_this_month:
            # Piglets in lactation
            if batch['farrow_month'] <= month < batch['wean_month']:
                piglets_with_sow += batch['piglets']
            # Growers
            if batch['grower_start_month'] <= month < batch['grower_end_month']:
                current_growers += batch['piglets']
                grower_feed_cost += batch['grower_feed_per_month'] * grower_feed_price
            # Identify batches ready for sale this month
            if batch['grower_end_month'] == month:
                 ready_for_sale_batches.append(batch)


        # Implement bimonthly sale logic starting from month 13
        if month >= 13 and (month - 13) % 2 == 0 and ready_for_sale_batches:
            pigs_sold_this_period = 0
            batches_sold_this_period_ids = [] # Track IDs of batches sold

            # Find batches that were ready for sale in the last two months (current month and previous month)
            sale_period_start_month = month - 1 if month > 13 else 13 # For month 13, start from month 13
            sale_period_end_month = month

            batches_to_sell_in_this_period = [batch for batch in ready_for_sale_batches if batch['grower_end_month'] >= sale_period_start_month and batch['grower_end_month'] <= sale_period_end_month]


            for batch_to_sell in batches_to_sell_in_this_period:
                 pigs_sold_batch = batch_to_sell['piglets'] * (1 - 0.03) # Apply piglet mortality to pigs ready for sale
                 pigs_sold_this_period += pigs_sold_batch
                 batches_sold_this_period_ids.append(batch_to_sell['batch_id'])


            revenue += pigs_sold_this_period * final_weight * sale_price
            sold_pigs = pigs_sold_this_period

            # Remove batches that were sold from the ready_for_sale_batches list
            ready_for_sale_batches = [batch for batch in ready_for_sale_batches if batch['batch_id'] not in batches_sold_this_period_ids]

            # Mark the sold batches for permanent removal from the main batches list
            for batch_id in batches_sold_this_period_ids:
                for batch in batches:
                    if batch['batch_id'] == batch_id:
                         batches_to_remove_permanently.append(batch)
                         break # Found the batch, move to next id


        # Handle remaining growers in the final month
        if month == months and batches:
             pigs_sold_this_period = 0
             batches_sold_this_period_ids = []
             for batch in batches:
                 pigs_sold_batch = batch['piglets'] * (1 - 0.03) # Apply piglet mortality to all remaining pigs
                 pigs_sold_this_period += pigs_sold_batch
                 batches_sold_this_period_ids.append(batch['batch_id'])

             last_month_grower_revenue = pigs_sold_this_period * final_weight * sale_price
             revenue += last_month_grower_revenue
             sold_pigs += pigs_sold_this_period # Add to sold pigs for this month

             for batch_id in batches_sold_this_period_ids:
                 for batch in batches:
                    if batch['batch_id'] == batch_id:
                         batches_to_remove_permanently.append(batch)
                         break # Found the batch, move to next id


        # Remove sold batches permanently from the main batches list
        for batch in batches_to_remove_permanently:
            if batch in batches:
                batches.remove(batch)


        # Subtract sold pigs from the total grower count for this month AFTER calculating current_growers
        current_growers -= sold_pigs


        mgmt_comm_cost = revenue * management_commission
        other_fixed = medicine_cost + electricity_cost + land_lease
        total_operating_cost = sow_feed_cost + grower_feed_cost + staff_cost + mgmt_fixed + mgmt_comm_cost + other_fixed
        dep = (shed_cost * shed_dep_rate) + (sow_cost * sow_dep_rate)


        # Loan EMI
        if month <= moratorium_months:
            loan_payment = loan_balance * monthly_rate
        elif month <= total_months:
            interest = loan_balance * monthly_rate
            principal = emi - interest
            loan_balance -= principal
            loan_payment = emi
        else:
            loan_payment = 0

        monthly_profit = revenue - total_operating_cost - dep - loan_payment
        monthly_profit_percentage = (monthly_profit / revenue * 100) if revenue > 0 else 0

        # Calculate monthly cash flow (excluding depreciation)
        monthly_cash_flow = revenue - total_operating_cost - loan_payment
        cumulative_cash_flow += monthly_cash_flow


        monthly_data.append({
            'Month': month,
            'Piglets_Born_Alive': piglets_with_sow,
            'Growers': current_growers,
            'Sold_Pigs': sold_pigs,
            'Sows_Mated': sows_mated_this_month, # Keep Sows_Mated
            # Remove Sows_Aborted and Sow_Mortality
            'Revenue': round(revenue),
            'Sow_Feed_Cost': round(sow_feed_cost),
            'Grower_Feed_Cost': round(grower_feed_cost),
            'Staff_Cost': round(staff_cost),
            'Mgmt_Fee': round(mgmt_fixed),
            'Mgmt_Comm': round(mgmt_comm_cost),
            'Other_Fixed_Costs': round(other_fixed),
            'Total_Operating_Cost': round(total_operating_cost),
            'Depreciation': round(dep),
            'Loan_EMI': round(loan_payment),
            'Monthly_Profit': round(monthly_profit),
            'Monthly_Profit_%': monthly_profit_percentage,
            'Monthly_Cash_Flow': round(monthly_cash_flow),
            'Cumulative_Cash_Flow': round(cumulative_cash_flow)
        })

       # current_sows -= current_sows * sow_mortality / 12

    df_month = pd.DataFrame(monthly_data)
    df_month['Year'] = ((df_month['Month'] - 1) // 12) + 1

    # Calculate remaining value of shed and sows
    remaining_shed_life_months = max(0, (shed_life_years * 12) - months)
    remaining_sow_life_months = max(0, (sow_life_years * 12) - months)

    remaining_shed_value = shed_cost * (remaining_shed_life_months / (shed_life_years * 12)) if (shed_life_years * 12) > 0 else 0
    remaining_sow_value = sow_cost * (remaining_sow_life_months / (sow_life_years * 12)) if (sow_life_years * 12) > 0 else 0

    remaining_asset_value = remaining_shed_value + remaining_sow_value

    # Add remaining asset value to the final cumulative cash flow
    cumulative_cash_flow_with_assets = cumulative_cash_flow + remaining_asset_value


    # Monthly summary - Apply styling after all calculations
    df_month_styled = df_month.style

    # Yearly summary
    cols_to_sum = ['Revenue','Sow_Feed_Cost','Grower_Feed_Cost','Staff_Cost','Mgmt_Fee','Mgmt_Comm',
                   'Other_Fixed_Costs','Total_Operating_Cost','Depreciation','Loan_EMI', 'Piglets_Born_Alive', 'Sold_Pigs', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Sows_Mated'] # Remove Sows_Aborted and Sow_Mortality

    df_year = df_month.groupby('Year')[cols_to_sum].sum()

    # Get the 'Growers' value from the last month of each year
    growers_end_of_year = df_month.groupby('Year')['Growers'].tail(1).values
    df_year['Growers'] = growers_end_of_year

    # Get the 'Cumulative_Cash_Flow' value from the last month of each year
    cumulative_cash_flow_end_of_year = df_month.groupby('Year')['Cumulative_Cash_Flow'].tail(1).values
    df_year['Cumulative_Cash_Flow'] = cumulative_cash_flow_end_of_year

    # Get the 'Animal_Head_Count' value from the last month of each year - This column is not in monthly_data anymore
    # animal_head_count_end_of_year = df_month.groupby('Year')['Animal_Head_Count'].tail(1).values
    # df_year['Animal_Head_Count'] = animal_head_count_end_of_year


    df_year.index = [f'Year {i}' for i in df_year.index]
    df_year['Cash_Profit'] = df_year['Revenue'] - df_year['Total_Operating_Cost']
    df_year['Profit_After_Dep_Loan'] = df_year['Cash_Profit'] - df_year['Depreciation'] - df_year['Loan_EMI']
    df_year['Cash_Profit_%'] = (df_year['Cash_Profit'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
    df_year['Profit_After_Dep_Loan_%'] = (df_year['Profit_After_Dep_Loan'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0


    # Add Total Capital Invested column
    df_year['Total Capital Invested'] = total_capital_invested

    return df_month_styled, df_year, total_capital_invested, cumulative_cash_flow_with_assets, revenue, remaining_sow_value, remaining_shed_value

df_month_styled, df_year, total_capital_invested, cumulative_cash_flow_with_assets, last_month_revenue, remaining_sow_value, remaining_shed_value = sow_rotation_simulator_with_stages(months=84, abortion_rate=0.03)
display(df_month_styled)
display(df_year)

"""**Reasoning**:
Define the `run_simulation` function to call the simulator with widget values and display results.


"""

df_month_styled, df_year, total_capital_invested, cumulative_cash_flow_with_assets, last_month_revenue, remaining_sow_value, remaining_shed_value = sow_rotation_simulator_with_stages(months=84, abortion_rate=0.03)
display(df_month_styled)
display(df_year)

import ipywidgets as widgets

# Create sliders for each parameter



import ipywidgets as widgets
from IPython.display import display

# Get the parameters and their default values from the function signature
import inspect
sig = inspect.signature(sow_rotation_simulator_with_stages)
params = sig.parameters

# Create sliders for each parameter
widget_params = {}
for name, param in params.items():
    if name == 'months': # Special case for months as it affects the simulation duration
        widget_params[name] = widgets.IntSlider(
            value=param.default,
            min=12,
            max=120,
            step=12,
            description=f'{name.replace("_", " ").title()}:',
            layout=widgets.Layout(width='50%')
        )
    elif isinstance(param.default, int):
        widget_params[name] = widgets.IntSlider(
            value=param.default,
            min=0,
            max=param.default * 5 if param.default > 0 else 100, # Adjust max based on default
            step=param.default // 10 if param.default > 10 else 1, # Adjust step based on default
            description=f'{name.replace("_", " ").title()}:',
            layout=widgets.Layout(width='50%')
        )
    elif isinstance(param.default, float):
        widget_params[name] = widgets.FloatSlider(
            value=param.default,
            min=0.0,
            max=param.default * 5 if param.default > 0 else 1.0, # Adjust max based on default
            step=param.default / 10 if param.default > 0.1 else 0.001, # Adjust step based on default
            description=f'{name.replace("_", " ").title()}:',
            layout=widgets.Layout(width='50%'),
            readout_format='.3f'
        )
    # Add more widget types if needed for other parameter types

# You can manually adjust min/max/step for specific sliders if needed
widget_params['total_sows'].max = 500
widget_params['total_sows'].step = 5
widget_params['piglets_per_cycle'].max = 20.0
widget_params['piglets_per_cycle'].step = 1
widget_params['sow_mortality'].max = 0.5
widget_params['piglet_mortality'].max = 0.5
widget_params['abortion_rate'].max = 0.5
widget_params['sow_feed_price'].max = 50
widget_params['grower_feed_price'].max = 50
widget_params['fcr'].max = 4.0
widget_params['fcr'].min = 2.0
widget_params['fcr'].step = 0.1
widget_params['final_weight'].max = 200
widget_params['final_weight'].min = 20
widget_params['sale_price'].max = 600
widget_params['sale_price'].step = 10
widget_params['management_fee'].max = 200000
widget_params['management_fee'].step = 5000
widget_params['management_commission'].max = 0.2
widget_params['management_commission'].step = 0.01
widget_params['supervisor_salary'].max = 50000
widget_params['supervisor_salary'].step = 1000
widget_params['worker_salary'].max = 30000
widget_params['worker_salary'].step = 1000
widget_params['n_workers'].max = 50
widget_params['shed_cost'].max = 5000000
widget_params['shed_cost'].min = 500000
widget_params['shed_cost'].step = 100000
widget_params['shed_life_years'].max = 30
widget_params['sow_cost'].max = 3000000
widget_params['sow_cost'].min = 500000
widget_params['sow_cost'].step = 100000
widget_params['sow_life_years'].max = 10
widget_params['loan_amount'].max = 10000000
widget_params['loan_amount'].step = 100000
widget_params['interest_rate'].max = 0.36
widget_params['interest_rate'].step = 0.005
widget_params['loan_tenure_years'].max = 20
widget_params['moratorium_months'].max = 24
widget_params['medicine_cost'].max = 50000
widget_params['medicine_cost'].step = 1000
widget_params['electricity_cost'].max = 50000
widget_params['electricity_cost'].step = 1000
widget_params['land_lease'].max = 50000
widget_params['land_lease'].step = 1000
widget_params['sow_feed_intake'].max = 5.0
widget_params['sow_feed_intake'].step = 0.1


# You can display the widgets here to see them, but they won't be interactive yet
# for name, widget in widget_params.items():
#     display(widget)



"""# Task
Create a Streamlit application that simulates a pig farming operation with adjustable parameters using sliders and displays the results, including monthly and yearly financial summaries, total cash in hand, profit, and return on investment in INR.

## Create streamlit app file

### Subtask:
Create a new Python file (e.g., `app.py`) that will contain the Streamlit application code.

**Reasoning**:
The subtask is to create an empty Python file named `app.py`. This can be done using a shell command.
"""

!touch app.py

"""## Import libraries and simulation function

### Subtask:
Import necessary libraries (like `streamlit` and `pandas`) and copy the `sow_rotation_simulator_with_stages` function into the Streamlit app file.

**Reasoning**:
Import necessary libraries and copy the simulator function into the app.py file.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# 
# def sow_rotation_simulator_with_stages(
#     total_sows=30,
#     piglets_per_cycle=8,
#     sow_mortality=0.033,
#     piglet_mortality=0.03,
#     sow_feed_price=32,
#     sow_feed_intake=2.8,
#     grower_feed_price=28,
#     fcr=3.2,
#     final_weight=105,
#     sale_price=180,
#     management_fee=50000,
#     management_commission=0.05,
#     supervisor_salary=25000,
#     worker_salary=18000,
#     n_workers=2,
#     shed_cost=1_000_000,
#     shed_life_years=10,
#     sow_cost=1_050_000,
#     sow_life_years=4,
#     loan_amount=0,
#     interest_rate=0.1,
#     loan_tenure_years=5,
#     moratorium_months=0,
#     medicine_cost=10000,
#     electricity_cost=5000,
#     land_lease=10000,
#     months=60,
#     abortion_rate=0.03
# ):
#     current_sows = total_sows
#     monthly_data = []
# 
#     # Depreciation
#     shed_dep_rate = 1 / (shed_life_years * 12)
#     sow_dep_rate = 1 / (sow_life_years * 12)
# 
#     # Loan calculation
#     total_months = loan_tenure_years * 12
#     monthly_rate = interest_rate / 12
#     emi = 0
#     if loan_amount > 0 and total_months > 0:
#         emi = loan_amount * monthly_rate * (1 + monthly_rate)**total_months / ((1 + monthly_rate)**total_months - 1)
#     loan_balance = loan_amount
# 
#     # Calculate sows to mate dynamically
#     # Assuming average cycle length = Gestation (3.8 months) + Lactation (1.3 months) + Dry period (0.33 months) = 5.43 months
#     average_cycle_length = 3.8 + 1.3 + 0.33
#     sows_to_mate_per_month = total_sows / average_cycle_length
# 
#     batches = []
#     ready_for_sale_batches = [] # To temporarily hold batches ready for sale
# 
#     # Calculate total capital invested
#     total_capital_invested = shed_cost + sow_cost
#     cumulative_cash_flow = -total_capital_invested # Start with initial investment as negative cash flow
# 
#     for month in range(1, months + 1):
#         # Initialize monthly counters for sow events
#         sows_mated_this_month = 0
#         sows_aborted_this_month = 0
#         sow_mortality_this_month = 0
# 
#         sow_feed_cost = current_sows * sow_feed_intake * 30 * sow_feed_price
#         staff_cost = supervisor_salary + n_workers * worker_salary
#         mgmt_fixed = management_fee
# 
#         # Mate sows based on dynamic calculation and abortion rate, starting from month 2
#         if month >= 2:
#             sows_to_mate = sows_to_mate_per_month # Keep as decimal
#             sows_mated_this_month = sows_to_mate # Track sows mated
#             sows_pregnant = sows_to_mate * (1 - abortion_rate) # Keep as decimal
#             sows_aborted_this_month = sows_to_mate - sows_pregnant # Track abortions
# 
#             # Sow mortality (calculated monthly)
#             sow_mortality_this_month = current_sows * (sow_mortality / 12)
#             current_sows -= sow_mortality_this_month # Reduce current sows due to mortality
# 
# 
#             if sows_pregnant > 0:
#                 farrow_month = month + 4
#                 wean_month = farrow_month + 1
#                 grower_start_month = wean_month
#                 grower_end_month = grower_start_month + 6 # Grower period is 6 months
#                 piglets = sows_pregnant * piglets_per_cycle * (1 - piglet_mortality)
#                 batches.append({
#                     'batch_id': len(batches) + 1, # Assign a unique ID to each batch
#                     'farrow_month': farrow_month,
#                     'wean_month': wean_month,
#                     'grower_start_month': grower_start_month,
#                     'grower_end_month': grower_end_month,
#                     'piglets': piglets,
#                     'grower_feed_per_month': (piglets * fcr * final_weight) / 6 # Feed for 6 months
#                 })
# 
#         # Initialize counters for the current month (other than sow events)
#         piglets_with_sow = 0
#         current_growers = 0
#         sold_pigs = 0
#         revenue = 0
#         grower_feed_cost = 0
# 
#         batches_to_remove_permanently = [] # Batches that are sold are removed permanently
# 
# 
#         # Identify batches currently in different stages and sum up counts/costs
#         batches_this_month = batches.copy() # Work on a copy to avoid issues while removing
# 
#         for batch in batches_this_month:
#             # Piglets in lactation
#             if batch['farrow_month'] <= month < batch['wean_month']:
#                 piglets_with_sow += batch['piglets']
#             # Growers
#             if batch['grower_start_month'] <= month < batch['grower_end_month']:
#                 current_growers += batch['piglets']
#                 grower_feed_cost += batch['grower_feed_per_month'] * grower_feed_price
#             # Identify batches ready for sale this month
#             if batch['grower_end_month'] == month:
#                  ready_for_sale_batches.append(batch)
# 
# 
#         # Implement bimonthly sale logic starting from month 13
#         if month >= 13 and (month - 13) % 2 == 0 and ready_for_sale_batches:
#             pigs_sold_this_period = 0
#             batches_sold_this_period_ids = [] # Track IDs of batches sold
# 
#             # Find batches that were ready for sale in the last two months (current month and previous month)
#             sale_period_start_month = month - 1 if month > 13 else 13 # For month 13, start from month 13
#             sale_period_end_month = month
# 
#             batches_to_sell_in_this_period = [batch for batch in ready_for_sale_batches if batch['grower_end_month'] >= sale_period_start_month and batch['grower_end_month'] <= sale_period_end_month]
# 
# 
#             for batch_to_sell in batches_to_sell_in_this_period:
#                  pigs_sold_batch = batch_to_sell['piglets'] * (1 - 0.03) # Apply piglet mortality to pigs ready for sale
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch_to_sell['batch_id'])
# 
# 
#             revenue += pigs_sold_this_period * final_weight * sale_price
#             sold_pigs = pigs_sold_this_period
# 
#             # Remove batches that were sold from the ready_for_sale_batches list
#             ready_for_sale_batches = [batch for batch in ready_for_sale_batches if batch['batch_id'] not in batches_sold_this_period_ids]
# 
#             # Mark the sold batches for permanent removal from the main batches list
#             for batch_id in batches_sold_this_period_ids:
#                 for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Handle remaining growers in the final month
#         if month == months and batches:
#              pigs_sold_this_period = 0
#              batches_sold_this_period_ids = []
#              for batch in batches:
#                  pigs_sold_batch = batch['piglets'] * (1 - 0.03) # Apply piglet mortality to all remaining pigs
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch['batch_id'])
# 
#              last_month_grower_revenue = pigs_sold_this_period * final_weight * sale_price
#              revenue += last_month_grower_revenue
#              sold_pigs += pigs_sold_this_period # Add to sold pigs for this month
# 
#              for batch_id in batches_sold_this_period_ids:
#                  for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Remove sold batches permanently from the main batches list
#         for batch in batches_to_remove_permanently:
#             if batch in batches:
#                 batches.remove(batch)
# 
# 
#         # Subtract sold pigs from the total grower count for this month AFTER calculating current_growers
#         current_growers -= sold_pigs
# 
# 
#         mgmt_comm_cost = revenue * management_commission
#         other_fixed = medicine_cost + electricity_cost + land_lease
#         total_operating_cost = sow_feed_cost + grower_feed_cost + staff_cost + mgmt_fixed + mgmt_comm_cost + other_fixed
#         dep = (shed_cost * shed_dep_rate) + (sow_cost * sow_dep_rate)
# 
# 
#         # Loan EMI
#         if month <= moratorium_months:
#             loan_payment = loan_balance * monthly_rate
#         elif month <= total_months:
#             interest = loan_balance * monthly_rate
#             principal = emi - interest
#             loan_balance -= principal
#             loan_payment = emi
#         else:
#             loan_payment = 0
# 
#         monthly_profit = revenue - total_operating_cost - dep - loan_payment
#         monthly_profit_percentage = (monthly_profit / revenue * 100) if revenue > 0 else 0
# 
#         # Calculate monthly cash flow (excluding depreciation)
#         monthly_cash_flow = revenue - total_operating_cost - loan_payment
#         cumulative_cash_flow += monthly_cash_flow
# 
# 
#         monthly_data.append({
#             'Month': month,
#             'Piglets_Born_Alive': piglets_with_sow,
#             'Growers': current_growers,
#             'Sold_Pigs': sold_pigs,
#             'Sows_Mated': sows_mated_this_month,
#             'Revenue': round(revenue),
#             'Sow_Feed_Cost': round(sow_feed_cost),
#             'Grower_Feed_Cost': round(grower_feed_cost),
#             'Staff_Cost': round(staff_cost),
#             'Mgmt_Fee': round(mgmt_fixed),
#             'Mgmt_Comm': round(mgmt_comm_cost),
#             'Other_Fixed_Costs': round(other_fixed),
#             'Total_Operating_Cost': round(total_operating_cost),
#             'Depreciation': round(dep),
#             'Loan_EMI': round(loan_payment),
#             'Monthly_Profit': round(monthly_profit),
#             'Monthly_Profit_%': monthly_profit_percentage,
#             'Monthly_Cash_Flow': round(monthly_cash_flow),
#             'Cumulative_Cash_Flow': round(cumulative_cash_flow)
#         })
# 
# 
#     df_month = pd.DataFrame(monthly_data)
#     df_month['Year'] = ((df_month['Month'] - 1) // 12) + 1
# 
#     # Calculate remaining value of shed and sows
#     remaining_shed_life_months = max(0, (shed_life_years * 12) - months)
#     remaining_sow_life_months = max(0, (sow_life_years * 12) - months)
# 
#     remaining_shed_value = shed_cost * (remaining_shed_life_months / (shed_life_years * 12)) if (shed_life_years * 12) > 0 else 0
#     remaining_sow_value = sow_cost * (remaining_sow_life_months / (sow_life_years * 12)) if (sow_life_years * 12) > 0 else 0
# 
#     remaining_asset_value = remaining_shed_value + remaining_sow_value
# 
#     # Add remaining asset value to the final cumulative cash flow
#     cumulative_cash_flow_with_assets = cumulative_cash_flow + remaining_asset_value
# 
#     # Monthly summary - Apply styling after all calculations
#     df_month_styled = df_month.style
# 
#     # Yearly summary
#     cols_to_sum = ['Revenue','Sow_Feed_Cost','Grower_Feed_Cost','Staff_Cost','Mgmt_Fee','Mgmt_Comm',
#                    'Other_Fixed_Costs','Total_Operating_Cost','Depreciation','Loan_EMI', 'Piglets_Born_Alive', 'Sold_Pigs', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Sows_Mated']
# 
#     df_year = df_month.groupby('Year')[cols_to_sum].sum()
# 
#     # Get the 'Growers' value from the last month of each year
#     growers_end_of_year = df_month.groupby('Year')['Growers'].tail(1).values
#     df_year['Growers'] = growers_end_of_year
# 
#     # Get the 'Cumulative_Cash_Flow' value from the last month of each year
#     cumulative_cash_flow_end_of_year = df_month.groupby('Year')['Cumulative_Cash_Flow'].tail(1).values
#     df_year['Cumulative_Cash_Flow'] = cumulative_cash_flow_end_of_year
# 
#     df_year.index = [f'Year {i}' for i in df_year.index]
#     df_year['Cash_Profit'] = df_year['Revenue'] - df_year['Total_Operating_Cost']
#     df_year['Profit_After_Dep_Loan'] = df_year['Cash_Profit'] - df_year['Depreciation'] - df_year['Loan_EMI']
#     df_year['Cash_Profit_%'] = (df_year['Cash_Profit'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
#     df_year['Profit_After_Dep_Loan_%'] = (df_year['Profit_After_Dep_Loan'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
# 
#     # Add Total Capital Invested column
#     df_year['Total Capital Invested'] = total_capital_invested
# 
#     return df_month_styled, df_year, total_capital_invested, cumulative_cash_flow_with_assets, revenue, remaining_sow_value, remaining_shed_value
#

"""## Add streamlit input widgets

### Subtask:
Use Streamlit's input widgets (e.g., `st.sidebar.slider`, `st.number_input`) to create controls for all the simulation parameters in the Streamlit app's sidebar or main area.

**Reasoning**:
Use Streamlit widgets to create input controls for the simulation parameters in the app's sidebar.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# 
# def sow_rotation_simulator_with_stages(
#     total_sows=30,
#     piglets_per_cycle=8,
#     sow_mortality=0.033,
#     piglet_mortality=0.03,
#     sow_feed_price=32,
#     sow_feed_intake=2.8,
#     grower_feed_price=28,
#     fcr=3.2,
#     final_weight=105,
#     sale_price=180,
#     management_fee=50000,
#     management_commission=0.05,
#     supervisor_salary=25000,
#     worker_salary=18000,
#     n_workers=2,
#     shed_cost=1_000_000,
#     shed_life_years=10,
#     sow_cost=1_050_000,
#     sow_life_years=4,
#     loan_amount=0,
#     interest_rate=0.1,
#     loan_tenure_years=5,
#     moratorium_months=0,
#     medicine_cost=10000,
#     electricity_cost=5000,
#     land_lease=10000,
#     months=60,
#     abortion_rate=0.03
# ):
#     current_sows = total_sows
#     monthly_data = []
# 
#     # Depreciation
#     shed_dep_rate = 1 / (shed_life_years * 12)
#     sow_dep_rate = 1 / (sow_life_years * 12)
# 
#     # Loan calculation
#     total_months = loan_tenure_years * 12
#     monthly_rate = interest_rate / 12
#     emi = 0
#     if loan_amount > 0 and total_months > 0:
#         emi = loan_amount * monthly_rate * (1 + monthly_rate)**total_months / ((1 + monthly_rate)**total_months - 1)
#     loan_balance = loan_amount
# 
#     # Calculate sows to mate dynamically
#     # Assuming average cycle length = Gestation (3.8 months) + Lactation (1.3 months) + Dry period (0.33 months) = 5.43 months
#     average_cycle_length = 3.8 + 1.3 + 0.33
#     sows_to_mate_per_month = total_sows / average_cycle_length
# 
#     batches = []
#     ready_for_sale_batches = [] # To temporarily hold batches ready for sale
# 
#     # Calculate total capital invested
#     total_capital_invested = shed_cost + sow_cost
#     cumulative_cash_flow = -total_capital_invested # Start with initial investment as negative cash flow
# 
#     for month in range(1, months + 1):
#         # Initialize monthly counters for sow events
#         sows_mated_this_month = 0
#         sows_aborted_this_month = 0
#         sow_mortality_this_month = 0
# 
#         sow_feed_cost = current_sows * sow_feed_intake * 30 * sow_feed_price
#         staff_cost = supervisor_salary + n_workers * worker_salary
#         mgmt_fixed = management_fee
# 
#         # Mate sows based on dynamic calculation and abortion rate, starting from month 2
#         if month >= 2:
#             sows_to_mate = sows_to_mate_per_month # Keep as decimal
#             sows_mated_this_month = sows_to_mate # Track sows mated
#             sows_pregnant = sows_to_mate * (1 - abortion_rate) # Keep as decimal
#             sows_aborted_this_month = sows_to_mate - sows_pregnant # Track abortions
# 
#             # Sow mortality (calculated monthly)
#             sow_mortality_this_month = current_sows * (sow_mortality / 12)
#             current_sows -= sow_mortality_this_month # Reduce current sows due to mortality
# 
# 
#             if sows_pregnant > 0:
#                 farrow_month = month + 4
#                 wean_month = farrow_month + 1
#                 grower_start_month = wean_month
#                 grower_end_month = grower_start_month + 6 # Grower period is 6 months
#                 piglets = sows_pregnant * piglets_per_cycle * (1 - piglet_mortality)
#                 batches.append({
#                     'batch_id': len(batches) + 1, # Assign a unique ID to each batch
#                     'farrow_month': farrow_month,
#                     'wean_month': wean_month,
#                     'grower_start_month': grower_start_month,
#                     'grower_end_month': grower_end_month,
#                     'piglets': piglets,
#                     'grower_feed_per_month': (piglets * fcr * final_weight) / 6 # Feed for 6 months
#                 })
# 
#         # Initialize counters for the current month (other than sow events)
#         piglets_with_sow = 0
#         current_growers = 0
#         sold_pigs = 0
#         revenue = 0
#         grower_feed_cost = 0
# 
#         batches_to_remove_permanently = [] # Batches that are sold are removed permanently
# 
# 
#         # Identify batches currently in different stages and sum up counts/costs
#         batches_this_month = batches.copy() # Work on a copy to avoid issues while removing
# 
#         for batch in batches_this_month:
#             # Piglets in lactation
#             if batch['farrow_month'] <= month < batch['wean_month']:
#                 piglets_with_sow += batch['piglets']
#             # Growers
#             if batch['grower_start_month'] <= month < batch['grower_end_month']:
#                 current_growers += batch['piglets']
#                 grower_feed_cost += batch['grower_feed_per_month'] * grower_feed_price
#             # Identify batches ready for sale this month
#             if batch['grower_end_month'] == month:
#                  ready_for_sale_batches.append(batch)
# 
# 
#         # Implement bimonthly sale logic starting from month 13
#         if month >= 13 and (month - 13) % 2 == 0 and ready_for_sale_batches:
#             pigs_sold_this_period = 0
#             batches_sold_this_period_ids = [] # Track IDs of batches sold
# 
#             # Find batches that were ready for sale in the last two months (current month and previous month)
#             sale_period_start_month = month - 1 if month > 13 else 13 # For month 13, start from month 13
#             sale_period_end_month = month
# 
#             batches_to_sell_in_this_period = [batch for batch in ready_for_sale_batches if batch['grower_end_month'] >= sale_period_start_month and batch['grower_end_month'] <= sale_period_end_month]
# 
# 
#             for batch_to_sell in batches_to_sell_in_this_period:
#                  pigs_sold_batch = batch_to_sell['piglets'] * (1 - 0.03) # Apply piglet mortality to pigs ready for sale
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch_to_sell['batch_id'])
# 
# 
#             revenue += pigs_sold_this_period * final_weight * sale_price
#             sold_pigs = pigs_sold_this_period
# 
#             # Remove batches that were sold from the ready_for_sale_batches list
#             ready_for_sale_batches = [batch for batch in ready_for_sale_batches if batch['batch_id'] not in batches_sold_this_period_ids]
# 
#             # Mark the sold batches for permanent removal from the main batches list
#             for batch_id in batches_sold_this_period_ids:
#                 for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Handle remaining growers in the final month
#         if month == months and batches:
#              pigs_sold_this_period = 0
#              batches_sold_this_period_ids = []
#              for batch in batches:
#                  pigs_sold_batch = batch['piglets'] * (1 - 0.03) # Apply piglet mortality to all remaining pigs
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch['batch_id'])
# 
#              last_month_grower_revenue = pigs_sold_this_period * final_weight * sale_price
#              revenue += last_month_grower_revenue
#              sold_pigs += pigs_sold_this_period # Add to sold pigs for this month
# 
#              for batch_id in batches_sold_this_period_ids:
#                  for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Remove sold batches permanently from the main batches list
#         for batch in batches_to_remove_permanently:
#             if batch in batches:
#                 batches.remove(batch)
# 
# 
#         # Subtract sold pigs from the total grower count for this month AFTER calculating current_growers
#         current_growers -= sold_pigs
# 
# 
#         mgmt_comm_cost = revenue * management_commission
#         other_fixed = medicine_cost + electricity_cost + land_lease
#         total_operating_cost = sow_feed_cost + grower_feed_cost + staff_cost + mgmt_fixed + mgmt_comm_cost + other_fixed
#         dep = (shed_cost * shed_dep_rate) + (sow_cost * sow_dep_rate)
# 
# 
#         # Loan EMI
#         if month <= moratorium_months:
#             loan_payment = loan_balance * monthly_rate
#         elif month <= total_months:
#             interest = loan_balance * monthly_rate
#             principal = emi - interest
#             loan_balance -= principal
#             loan_payment = emi
#         else:
#             loan_payment = 0
# 
#         monthly_profit = revenue - total_operating_cost - dep - loan_payment
#         monthly_profit_percentage = (monthly_profit / revenue * 100) if revenue > 0 else 0
# 
#         # Calculate monthly cash flow (excluding depreciation)
#         monthly_cash_flow = revenue - total_operating_cost - loan_payment
#         cumulative_cash_flow += monthly_cash_flow
# 
# 
#         monthly_data.append({
#             'Month': month,
#             'Piglets_Born_Alive': piglets_with_sow,
#             'Growers': current_growers,
#             'Sold_Pigs': sold_pigs,
#             'Sows_Mated': sows_mated_this_month,
#             'Revenue': round(revenue),
#             'Sow_Feed_Cost': round(sow_feed_cost),
#             'Grower_Feed_Cost': round(grower_feed_cost),
#             'Staff_Cost': round(staff_cost),
#             'Mgmt_Fee': round(mgmt_fixed),
#             'Mgmt_Comm': round(mgmt_comm_cost),
#             'Other_Fixed_Costs': round(other_fixed),
#             'Total_Operating_Cost': round(total_operating_cost),
#             'Depreciation': round(dep),
#             'Loan_EMI': round(loan_payment),
#             'Monthly_Profit': round(monthly_profit),
#             'Monthly_Profit_%': monthly_profit_percentage,
#             'Monthly_Cash_Flow': round(monthly_cash_flow),
#             'Cumulative_Cash_Flow': round(cumulative_cash_flow)
#         })
# 
# 
#     df_month = pd.DataFrame(monthly_data)
#     df_month['Year'] = ((df_month['Month'] - 1) // 12) + 1
# 
#     # Calculate remaining value of shed and sows
#     remaining_shed_life_months = max(0, (shed_life_years * 12) - months)
#     remaining_sow_life_months = max(0, (sow_life_years * 12) - months)
# 
#     remaining_shed_value = shed_cost * (remaining_shed_life_months / (shed_life_years * 12)) if (shed_life_years * 12) > 0 else 0
#     remaining_sow_value = sow_cost * (remaining_sow_life_months / (sow_life_years * 12)) if (sow_life_years * 12) > 0 else 0
# 
#     remaining_asset_value = remaining_shed_value + remaining_sow_value
# 
#     # Add remaining asset value to the final cumulative cash flow
#     cumulative_cash_flow_with_assets = cumulative_cash_flow + remaining_asset_value
# 
# 
#     # Monthly summary - Apply styling after all calculations
#     df_month_styled = df_month.style
# 
#     # Yearly summary
#     cols_to_sum = ['Revenue','Sow_Feed_Cost','Grower_Feed_Cost','Staff_Cost','Mgmt_Fee','Mgmt_Comm',
#                    'Other_Fixed_Costs','Total_Operating_Cost','Depreciation','Loan_EMI', 'Piglets_Born_Alive', 'Sold_Pigs', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Sows_Mated']
# 
#     df_year = df_month.groupby('Year')[cols_to_sum].sum()
# 
#     # Get the 'Growers' value from the last month of each year
#     growers_end_of_year = df_month.groupby('Year')['Growers'].tail(1).values
#     df_year['Growers'] = growers_end_of_year
# 
#     # Get the 'Cumulative_Cash_Flow' value from the last month of each year
#     cumulative_cash_flow_end_of_year = df_month.groupby('Year')['Cumulative_Cash_Flow'].tail(1).values
#     df_year['Cumulative_Cash_Flow'] = cumulative_cash_flow_end_of_year
# 
#     df_year.index = [f'Year {i}' for i in df_year.index]
#     df_year['Cash_Profit'] = df_year['Revenue'] - df_year['Total_Operating_Cost']
#     df_year['Profit_After_Dep_Loan'] = df_year['Cash_Profit'] - df_year['Depreciation'] - df_year['Loan_EMI']
#     df_year['Cash_Profit_%'] = (df_year['Cash_Profit'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
#     df_year['Profit_After_Dep_Loan_%'] = (df_year['Profit_After_Dep_Loan'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
# 
#     # Add Total Capital Invested column
#     df_year['Total Capital Invested'] = total_capital_invested
# 
# 
#     return df_month_styled, df_year, total_capital_invested, cumulative_cash_flow_with_assets, revenue, remaining_sow_value, remaining_shed_value
# 
# st.title('Pig Farming Operation Simulator')
# 
# st.sidebar.header('Simulation Parameters')
# 
# # Define widgets for each parameter
# total_sows = st.sidebar.slider('Total Sows', min_value=10, max_value=200, value=30, step=5)
# piglets_per_cycle = st.sidebar.slider('Piglets Per Cycle', min_value=5.0, max_value=15.0, value=8.0, step=0.1)
# sow_mortality = st.sidebar.slider('Sow Mortality Rate', min_value=0.0, max_value=0.5, value=0.033, step=0.001, format="%.3f")
# piglet_mortality = st.sidebar.slider('Piglet Mortality Rate', min_value=0.0, max_value=0.5, value=0.03, step=0.001, format="%.3f")
# abortion_rate = st.sidebar.slider('Abortion Rate', min_value=0.0, max_value=0.5, value=0.03, step=0.001, format="%.3f")
# 
# st.sidebar.header('Feed and Sale Parameters')
# sow_feed_price = st.sidebar.number_input('Sow Feed Price (per kg)', min_value=0, max_value=50, value=32, step=1)
# sow_feed_intake = st.sidebar.slider('Sow Feed Intake (kg/day)', min_value=0.0, max_value=5.0, value=2.8, step=0.1)
# grower_feed_price = st.sidebar.number_input('Grower Feed Price (per kg)', min_value=0, max_value=50, value=28, step=1)
# fcr = st.sidebar.slider('Feed Conversion Ratio (FCR)', min_value=2.0, max_value=4.0, value=3.2, step=0.01, format="%.2f")
# final_weight = st.sidebar.number_input('Final Weight (kg)', min_value=80, max_value=120, value=105, step=1)
# sale_price = st.sidebar.number_input('Sale Price (per kg)', min_value=100, max_value=300, value=180, step=5)
# 
# st.sidebar.header('Management and Staff Costs')
# management_fee = st.sidebar.number_input('Management Fee (Monthly)', min_value=0, max_value=200000, value=50000, step=10000)
# management_commission = st.sidebar.slider('Management Commission Rate', min_value=0.0, max_value=0.2, value=0.05, step=0.001, format="%.3f")
# supervisor_salary = st.sidebar.number_input('Supervisor Salary (Monthly)', min_value=0, max_value=50000, value=25000, step=1000)
# worker_salary = st.sidebar.number_input('Worker Salary (Monthly)', min_value=0, max_value=30000, value=18000, step=1000)
# n_workers = st.sidebar.number_input('Number of Workers', min_value=0, max_value=10, value=2)
# 
# st.sidebar.header('Capital Costs')
# shed_cost = st.sidebar.number_input('Shed Cost', min_value=500000, max_value=5000000, value=1000000, step=100000)
# shed_life_years = st.sidebar.number_input('Shed Life (Years)', min_value=1, max_value=30, value=10)
# sow_cost = st.sidebar.number_input('Sow Cost (per sow)', min_value=500000, max_value=3000000, value=1050000, step=100000)
# sow_life_years = st.sidebar.number_input('Sow Life (Years)', min_value=1, max_value=10, value=4)
# 
# st.sidebar.header('Loan Parameters')
# loan_amount = st.sidebar.number_input('Loan Amount', min_value=0, max_value=10000000, value=0, step=100000)
# interest_rate = st.sidebar.slider('Interest Rate (Annual)', min_value=0.0, max_value=0.2, value=0.1, step=0.001, format="%.3f")
# loan_tenure_years = st.sidebar.number_input('Loan Tenure (Years)', min_value=1, max_value=20, value=5)
# moratorium_months = st.sidebar.number_input('Moratorium Period (Months)', min_value=0, max_value=24, value=0)
# 
# st.sidebar.header('Other Fixed Costs')
# medicine_cost = st.sidebar.number_input('Medicine Cost (Monthly)', min_value=0, max_value=50000, value=10000, step=1000)
# electricity_cost = st.sidebar.number_input('Electricity Cost (Monthly)', min_value=0, max_value=50000, value=5000, step=1000)
# land_lease = st.sidebar.number_input('Land Lease (Monthly)', min_value=0, max_value=50000, value=10000, step=1000)
# 
# st.sidebar.header('Simulation Duration')
# months = st.sidebar.slider('Simulation Duration (Months)', min_value=12, max_value=120, value=60, step=12)
# 
# # Pass widget values to the simulator function
# df_month_styled, df_year, total_capital_invested, cumulative_cash_flow_with_assets, last_month_revenue, remaining_sow_value, remaining_shed_value = sow_rotation_simulator_with_stages(
#     total_sows=total_sows,
#     piglets_per_cycle=piglets_per_cycle,
#     sow_mortality=sow_mortality,
#     piglet_mortality=piglet_mortality,
#     sow_feed_price=sow_feed_price,
#     sow_feed_intake=sow_feed_intake,
#     grower_feed_price=grower_feed_price,
#     fcr=fcr,
#     final_weight=final_weight,
#     sale_price=sale_price,
#     management_fee=management_fee,
#     management_commission=management_commission,
#     supervisor_salary=supervisor_salary,
#     worker_salary=worker_salary,
#     n_workers=n_workers,
#     shed_cost=shed_cost,
#     shed_life_years=shed_life_years,
#     sow_cost=sow_cost,
#     sow_life_years=sow_life_years,
#     loan_amount=loan_amount,
#     interest_rate=interest_rate,
#     loan_tenure_years=loan_tenure_years,
#     moratorium_months=moratorium_months,
#     medicine_cost=medicine_cost,
#     electricity_cost=electricity_cost,
#     land_lease=land_lease,
#     months=months,
#     abortion_rate=abortion_rate
# )
# 
# # Display results (this will be done in the next subtask)
# # st.header("Simulation Results")
# # st.subheader("Monthly Summary")
# # st.dataframe(df_month_styled) # Styled dataframes need to be handled differently in Streamlit
# # st.subheader("Yearly Summary")
# # st.dataframe(df_year)
# # st.subheader("Financial Summary")
# # st.write(f"Total Capital Initially Invested: ₹{total_capital_invested:,.2f}")
# # st.write(f"Cumulative Cash Flow after {months} months: ₹{cumulative_cash_flow_with_assets:,.2f}")
# 
# # Calculate ROI
# # roi = (cumulative_cash_flow_with_assets / total_capital_invested) * 100 if total_capital_invested > 0 else 0
# # st.write(f"Return on Investment (ROI): {roi:.2f}%")
#

"""## Get widget values

### Subtask:
Retrieve the current values from the Streamlit input widgets.

## Call simulation function

### Subtask:
Call the `sow_rotation_simulator_with_stages` function using the values obtained from the Streamlit widgets.

## Display results in streamlit

### Subtask:
Use Streamlit's output functions (e.g., `st.write`, `st.dataframe`) to display the simulation results (monthly and yearly tables, total cash in hand, profit, ROI, etc.) in the Streamlit app's main area.

**Reasoning**:
Add the display of simulation results to the Streamlit app file, including monthly and yearly summaries, total capital invested, cumulative cash flow, and calculated ROI, formatting currency values in INR.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# 
# def sow_rotation_simulator_with_stages(
#     total_sows=30,
#     piglets_per_cycle=8,
#     sow_mortality=0.033,
#     piglet_mortality=0.03,
#     sow_feed_price=32,
#     sow_feed_intake=2.8,
#     grower_feed_price=28,
#     fcr=3.2,
#     final_weight=105,
#     sale_price=180,
#     management_fee=50000,
#     management_commission=0.05,
#     supervisor_salary=25000,
#     worker_salary=18000,
#     n_workers=2,
#     shed_cost=1_000_000,
#     shed_life_years=10,
#     sow_cost=1_050_000,
#     sow_life_years=4,
#     loan_amount=0,
#     interest_rate=0.1,
#     loan_tenure_years=5,
#     moratorium_months=0,
#     medicine_cost=10000,
#     electricity_cost=5000,
#     land_lease=10000,
#     months=60,
#     abortion_rate=0.03
# ):
#     current_sows = total_sows
#     monthly_data = []
# 
#     # Depreciation
#     shed_dep_rate = 1 / (shed_life_years * 12)
#     sow_dep_rate = 1 / (sow_life_years * 12)
# 
#     # Loan calculation
#     total_months = loan_tenure_years * 12
#     monthly_rate = interest_rate / 12
#     emi = 0
#     if loan_amount > 0 and total_months > 0:
#         emi = loan_amount * monthly_rate * (1 + monthly_rate)**total_months / ((1 + monthly_rate)**total_months - 1)
#     loan_balance = loan_amount
# 
#     # Calculate sows to mate dynamically
#     # Assuming average cycle length = Gestation (3.8 months) + Lactation (1.3 months) + Dry period (0.33 months) = 5.43 months
#     average_cycle_length = 3.8 + 1.3 + 0.33
#     sows_to_mate_per_month = total_sows / average_cycle_length
# 
#     batches = []
#     ready_for_sale_batches = [] # To temporarily hold batches ready for sale
# 
#     # Calculate total capital invested
#     total_capital_invested = shed_cost + sow_cost
#     cumulative_cash_flow = -total_capital_invested # Start with initial investment as negative cash flow
# 
#     for month in range(1, months + 1):
#         # Initialize monthly counters for sow events
#         sows_mated_this_month = 0
#         sows_aborted_this_month = 0
#         sow_mortality_this_month = 0
# 
#         sow_feed_cost = current_sows * sow_feed_intake * 30 * sow_feed_price
#         staff_cost = supervisor_salary + n_workers * worker_salary
#         mgmt_fixed = management_fee
# 
#         # Mate sows based on dynamic calculation and abortion rate, starting from month 2
#         if month >= 2:
#             sows_to_mate = sows_to_mate_per_month # Keep as decimal
#             sows_mated_this_month = sows_to_mate # Track sows mated
#             sows_pregnant = sows_to_mate * (1 - abortion_rate) # Keep as decimal
#             sows_aborted_this_month = sows_to_mate - sows_pregnant # Track abortions
# 
#             # Sow mortality (calculated monthly)
#             sow_mortality_this_month = current_sows * (sow_mortality / 12)
#             current_sows -= sow_mortality_this_month # Reduce current sows due to mortality
# 
# 
#             if sows_pregnant > 0:
#                 farrow_month = month + 4
#                 wean_month = farrow_month + 1
#                 grower_start_month = wean_month
#                 grower_end_month = grower_start_month + 6 # Grower period is 6 months
#                 piglets = sows_pregnant * piglets_per_cycle * (1 - piglet_mortality)
#                 batches.append({
#                     'batch_id': len(batches) + 1, # Assign a unique ID to each batch
#                     'farrow_month': farrow_month,
#                     'wean_month': wean_month,
#                     'grower_start_month': grower_start_month,
#                     'grower_end_month': grower_end_month,
#                     'piglets': piglets,
#                     'grower_feed_per_month': (piglets * fcr * final_weight) / 6 # Feed for 6 months
#                 })
# 
#         # Initialize counters for the current month (other than sow events)
#         piglets_with_sow = 0
#         current_growers = 0
#         sold_pigs = 0
#         revenue = 0
#         grower_feed_cost = 0
# 
#         batches_to_remove_permanently = [] # Batches that are sold are removed permanently
# 
# 
#         # Identify batches currently in different stages and sum up counts/costs
#         batches_this_month = batches.copy() # Work on a copy to avoid issues while removing
# 
#         for batch in batches_this_month:
#             # Piglets in lactation
#             if batch['farrow_month'] <= month < batch['wean_month']:
#                 piglets_with_sow += batch['piglets']
#             # Growers
#             if batch['grower_start_month'] <= month < batch['grower_end_month']:
#                 current_growers += batch['piglets']
#                 grower_feed_cost += batch['grower_feed_per_month'] * grower_feed_price
#             # Identify batches ready for sale this month
#             if batch['grower_end_month'] == month:
#                  ready_for_sale_batches.append(batch)
# 
# 
#         # Implement bimonthly sale logic starting from month 13
#         if month >= 13 and (month - 13) % 2 == 0 and ready_for_sale_batches:
#             pigs_sold_this_period = 0
#             batches_sold_this_period_ids = [] # Track IDs of batches sold
# 
#             # Find batches that were ready for sale in the last two months (current month and previous month)
#             sale_period_start_month = month - 1 if month > 13 else 13 # For month 13, start from month 13
#             sale_period_end_month = month
# 
#             batches_to_sell_in_this_period = [batch for batch in ready_for_sale_batches if batch['grower_end_month'] >= sale_period_start_month and batch['grower_end_month'] <= sale_period_end_month]
# 
# 
#             for batch_to_sell in batches_to_sell_in_this_period:
#                  pigs_sold_batch = batch_to_sell['piglets'] * (1 - 0.03) # Apply piglet mortality to pigs ready for sale
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch_to_sell['batch_id'])
# 
# 
#             revenue += pigs_sold_this_period * final_weight * sale_price
#             sold_pigs = pigs_sold_this_period
# 
#             # Remove batches that were sold from the ready_for_sale_batches list
#             ready_for_sale_batches = [batch for batch in ready_for_sale_batches if batch['batch_id'] not in batches_sold_this_period_ids]
# 
#             # Mark the sold batches for permanent removal from the main batches list
#             for batch_id in batches_sold_this_period_ids:
#                 for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Handle remaining growers in the final month
#         if month == months and batches:
#              pigs_sold_this_period = 0
#              batches_sold_this_period_ids = []
#              for batch in batches:
#                  pigs_sold_batch = batch['piglets'] * (1 - 0.03) # Apply piglet mortality to all remaining pigs
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch['batch_id'])
# 
#              last_month_grower_revenue = pigs_sold_this_period * final_weight * sale_price
#              revenue += last_month_grower_revenue
#              sold_pigs += pigs_sold_this_period # Add to sold pigs for this month
# 
#              for batch_id in batches_sold_this_period_ids:
#                  for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Remove sold batches permanently from the main batches list
#         for batch in batches_to_remove_permanently:
#             if batch in batches:
#                 batches.remove(batch)
# 
# 
#         # Subtract sold pigs from the total grower count for this month AFTER calculating current_growers
#         current_growers -= sold_pigs
# 
# 
#         mgmt_comm_cost = revenue * management_commission
#         other_fixed = medicine_cost + electricity_cost + land_lease
#         total_operating_cost = sow_feed_cost + grower_feed_cost + staff_cost + mgmt_fixed + mgmt_comm_cost + other_fixed
#         dep = (shed_cost * shed_dep_rate) + (sow_cost * sow_dep_rate)
# 
# 
#         # Loan EMI
#         if month <= moratorium_months:
#             loan_payment = loan_balance * monthly_rate
#         elif month <= total_months:
#             interest = loan_balance * monthly_rate
#             principal = emi - interest
#             loan_balance -= principal
#             loan_payment = emi
#         else:
#             loan_payment = 0
# 
#         monthly_profit = revenue - total_operating_cost - dep - loan_payment
#         monthly_profit_percentage = (monthly_profit / revenue * 100) if revenue > 0 else 0
# 
#         # Calculate monthly cash flow (excluding depreciation)
#         monthly_cash_flow = revenue - total_operating_cost - loan_payment
#         cumulative_cash_flow += monthly_cash_flow
# 
# 
#         monthly_data.append({
#             'Month': month,
#             'Piglets_Born_Alive': piglets_with_sow,
#             'Growers': current_growers,
#             'Sold_Pigs': sold_pigs,
#             'Sows_Mated': sows_mated_this_month,
#             'Revenue': round(revenue),
#             'Sow_Feed_Cost': round(sow_feed_cost),
#             'Grower_Feed_Cost': round(grower_feed_cost),
#             'Staff_Cost': round(staff_cost),
#             'Mgmt_Fee': round(mgmt_fixed),
#             'Mgmt_Comm': round(mgmt_comm_cost),
#             'Other_Fixed_Costs': round(other_fixed),
#             'Total_Operating_Cost': round(total_operating_cost),
#             'Depreciation': round(dep),
#             'Loan_EMI': round(loan_payment),
#             'Monthly_Profit': round(monthly_profit),
#             'Monthly_Profit_%': monthly_profit_percentage,
#             'Monthly_Cash_Flow': round(monthly_cash_flow),
#             'Cumulative_Cash_Flow': round(cumulative_cash_flow)
#         })
# 
# 
#     df_month = pd.DataFrame(monthly_data)
#     df_month['Year'] = ((df_month['Month'] - 1) // 12) + 1
# 
#     # Calculate remaining value of shed and sows
#     remaining_shed_life_months = max(0, (shed_life_years * 12) - months)
#     remaining_sow_life_months = max(0, (sow_life_years * 12) - months)
# 
#     remaining_shed_value = shed_cost * (remaining_shed_life_months / (shed_life_years * 12)) if (shed_life_years * 12) > 0 else 0
#     remaining_sow_value = sow_cost * (remaining_sow_life_months / (sow_life_years * 12)) if (sow_life_years * 12) > 0 else 0
# 
#     remaining_asset_value = remaining_shed_value + remaining_sow_value
# 
#     # Add remaining asset value to the final cumulative cash flow
#     cumulative_cash_flow_with_assets = cumulative_cash_flow + remaining_asset_value
# 
# 
#     # Monthly summary - Apply styling after all calculations
#     # Streamlit doesn't directly support pandas Styler objects for display
#     # We will return the raw dataframe and handle display in Streamlit
#     df_month_display = df_month.copy()
# 
# 
#     # Yearly summary
#     cols_to_sum = ['Revenue','Sow_Feed_Cost','Grower_Feed_Cost','Staff_Cost','Mgmt_Fee','Mgmt_Comm',
#                    'Other_Fixed_Costs','Total_Operating_Cost','Depreciation','Loan_EMI', 'Piglets_Born_Alive', 'Sold_Pigs', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Sows_Mated']
# 
#     df_year = df_month.groupby('Year')[cols_to_sum].sum()
# 
#     # Get the 'Growers' value from the last month of each year
#     growers_end_of_year = df_month.groupby('Year')['Growers'].tail(1).values
#     df_year['Growers'] = growers_end_of_year
# 
#     # Get the 'Cumulative_Cash_Flow' value from the last month of each year
#     cumulative_cash_flow_end_of_year = df_month.groupby('Year')['Cumulative_Cash_Flow'].tail(1).values
#     df_year['Cumulative_Cash_Flow'] = cumulative_cash_flow_end_of_year
# 
#     df_year.index = [f'Year {i}' for i in df_year.index]
#     df_year['Cash_Profit'] = df_year['Revenue'] - df_year['Total_Operating_Cost']
#     df_year['Profit_After_Dep_Loan'] = df_year['Cash_Profit'] - df_year['Depreciation'] - df_year['Loan_EMI']
#     df_year['Cash_Profit_%'] = (df_year['Cash_Profit'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
#     df_year['Profit_After_Dep_Loan_%'] = (df_year['Profit_After_Dep_Loan'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
# 
#     # Add Total Capital Invested column
#     df_year['Total Capital Invested'] = total_capital_invested
# 
# 
#     return df_month_display, df_year, total_capital_invested, cumulative_cash_flow_with_assets, revenue, remaining_sow_value, remaining_shed_value
# 
# st.title('Pig Farming Operation Simulator')
# 
# st.sidebar.header('Simulation Parameters')
# 
# # Define widgets for each parameter
# total_sows = st.sidebar.slider('Total Sows', min_value=10, max_value=200, value=30, step=5)
# piglets_per_cycle = st.sidebar.slider('Piglets Per Cycle', min_value=5.0, max_value=15.0, value=8.0, step=0.1)
# sow_mortality = st.sidebar.slider('Sow Mortality Rate', min_value=0.0, max_value=0.5, value=0.033, step=0.001, format="%.3f")
# piglet_mortality = st.sidebar.slider('Piglet Mortality Rate', min_value=0.0, max_value=0.5, value=0.03, step=0.001, format="%.3f")
# abortion_rate = st.sidebar.slider('Abortion Rate', min_value=0.0, max_value=0.5, value=0.03, step=0.001, format="%.3f")
# 
# st.sidebar.header('Feed and Sale Parameters')
# sow_feed_price = st.sidebar.number_input('Sow Feed Price (per kg)', min_value=0, max_value=50, value=32, step=1)
# sow_feed_intake = st.sidebar.slider('Sow Feed Intake (kg/day)', min_value=0.0, max_value=5.0, value=2.8, step=0.1)
# grower_feed_price = st.sidebar.number_input('Grower Feed Price (per kg)', min_value=0, max_value=50, value=28, step=1)
# fcr = st.sidebar.slider('Feed Conversion Ratio (FCR)', min_value=2.0, max_value=4.0, value=3.2, step=0.01, format="%.2f")
# final_weight = st.sidebar.number_input('Final Weight (kg)', min_value=80, max_value=120, value=105, step=1)
# sale_price = st.sidebar.number_input('Sale Price (per kg)', min_value=100, max_value=300, value=180, step=5)
# 
# st.sidebar.header('Management and Staff Costs')
# management_fee = st.sidebar.number_input('Management Fee (Monthly)', min_value=0, max_value=200000, value=50000, step=10000)
# management_commission = st.sidebar.slider('Management Commission Rate', min_value=0.0, max_value=0.2, value=0.05, step=0.001, format="%.3f")
# supervisor_salary = st.sidebar.number_input('Supervisor Salary (Monthly)', min_value=0, max_value=50000, value=25000, step=1000)
# worker_salary = st.sidebar.number_input('Worker Salary (Monthly)', min_value=0, max_value=30000, value=18000, step=1000)
# n_workers = st.sidebar.number_input('Number of Workers', min_value=0, max_value=10, value=2)
# 
# st.sidebar.header('Capital Costs')
# shed_cost = st.sidebar.number_input('Shed Cost', min_value=500000, max_value=5000000, value=1000000, step=100000)
# shed_life_years = st.sidebar.number_input('Shed Life (Years)', min_value=1, max_value=30, value=10)
# sow_cost = st.sidebar.number_input('Sow Cost (per sow)', min_value=500000, max_value=3000000, value=1050000, step=100000)
# sow_life_years = st.sidebar.number_input('Sow Life (Years)', min_value=1, max_value=10, value=4)
# 
# st.sidebar.header('Loan Parameters')
# loan_amount = st.sidebar.number_input('Loan Amount', min_value=0, max_value=10000000, value=0, step=100000)
# interest_rate = st.sidebar.slider('Interest Rate (Annual)', min_value=0.0, max_value=0.2, value=0.1, step=0.001, format="%.3f")
# loan_tenure_years = st.sidebar.number_input('Loan Tenure (Years)', min_value=1, max_value=20, value=5)
# moratorium_months = st.sidebar.number_input('Moratorium Period (Months)', min_value=0, max_value=24, value=0)
# 
# st.sidebar.header('Other Fixed Costs')
# medicine_cost = st.sidebar.number_input('Medicine Cost (Monthly)', min_value=0, max_value=50000, value=10000, step=1000)
# electricity_cost = st.sidebar.number_input('Electricity Cost (Monthly)', min_value=0, max_value=50000, value=5000, step=1000)
# land_lease = st.sidebar.number_input('Land Lease (Monthly)', min_value=0, max_value=50000, value=10000, step=1000)
# 
# st.sidebar.header('Simulation Duration')
# months = st.sidebar.slider('Simulation Duration (Months)', min_value=12, max_value=120, value=60, step=12)
# 
# # Pass widget values to the simulator function
# df_month, df_year, total_capital_invested, cumulative_cash_flow_with_assets, last_month_revenue, remaining_sow_value, remaining_shed_value = sow_rotation_simulator_with_stages(
#     total_sows=total_sows,
#     piglets_per_cycle=piglets_per_cycle,
#     sow_mortality=sow_mortality,
#     piglet_mortality=piglet_mortality,
#     sow_feed_price=sow_feed_price,
#     sow_feed_intake=sow_feed_intake,
#     grower_feed_price=grower_feed_price,
#     fcr=fcr,
#     final_weight=final_weight,
#     sale_price=sale_price,
#     management_fee=management_fee,
#     management_commission=management_commission,
#     supervisor_salary=supervisor_salary,
#     worker_salary=worker_salary,
#     n_workers=n_workers,
#     shed_cost=shed_cost,
#     shed_life_years=shed_life_years,
#     sow_cost=sow_cost,
#     sow_life_years=sow_life_years,
#     loan_amount=loan_amount,
#     interest_rate=interest_rate,
#     loan_tenure_years=loan_tenure_years,
#     moratorium_months=moratorium_months,
#     medicine_cost=medicine_cost,
#     electricity_cost=electricity_cost,
#     land_lease=land_lease,
#     months=months,
#     abortion_rate=abortion_rate
# )
# 
# # Display results
# st.header("Simulation Results")
# 
# st.subheader("Monthly Summary")
# # Format currency columns for display
# currency_cols_month = ['Revenue', 'Sow_Feed_Cost', 'Grower_Feed_Cost', 'Staff_Cost', 'Mgmt_Fee', 'Mgmt_Comm', 'Other_Fixed_Costs', 'Total_Operating_Cost', 'Depreciation', 'Loan_EMI', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Cumulative_Cash_Flow']
# for col in currency_cols_month:
#     df_month[col] = df_month[col].apply(lambda x: f'₹{x:,.2f}')
# st.dataframe(df_month)
# 
# st.subheader("Yearly Summary")
# # Format currency columns for display
# currency_cols_year = ['Revenue', 'Sow_Feed_Cost', 'Grower_Feed_Cost', 'Staff_Cost', 'Mgmt_Fee', 'Mgmt_Comm', 'Other_Fixed_Costs', 'Total_Operating_Cost', 'Depreciation', 'Loan_EMI', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Cumulative_Cash_Flow', 'Cash_Profit', 'Profit_After_Dep_Loan', 'Total Capital Invested']
# for col in currency_cols_year:
#     df_year[col] = df_year[col].apply(lambda x: f'₹{x:,.2f}')
# st.dataframe(df_year)
# 
# st.subheader("Financial Summary")
# st.write(f"Total Capital Initially Invested: ₹{total_capital_invested:,.2f}")
# st.write(f"Cumulative Cash Flow after {months} months: ₹{cumulative_cash_flow_with_assets:,.2f}")
# 
# # Calculate ROI
# roi = (cumulative_cash_flow_with_assets / total_capital_invested) * 100 if total_capital_invested > 0 else 0
# st.write(f"Return on Investment (ROI): {roi:.2f}%")

"""## Add instructions and title

### Subtask:
Add a title and brief instructions to the Streamlit app using `st.title` and `st.write`.

**Reasoning**:
Add a main title and introductory text to the Streamlit app using st.title and st.write as requested by the subtask instructions.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# 
# def sow_rotation_simulator_with_stages(
#     total_sows=30,
#     piglets_per_cycle=8,
#     sow_mortality=0.033,
#     piglet_mortality=0.03,
#     sow_feed_price=32,
#     sow_feed_intake=2.8,
#     grower_feed_price=28,
#     fcr=3.2,
#     final_weight=105,
#     sale_price=180,
#     management_fee=50000,
#     management_commission=0.05,
#     supervisor_salary=25000,
#     worker_salary=18000,
#     n_workers=2,
#     shed_cost=1_000_000,
#     shed_life_years=10,
#     sow_cost=1_050_000,
#     sow_life_years=4,
#     loan_amount=0,
#     interest_rate=0.1,
#     loan_tenure_years=5,
#     moratorium_months=0,
#     medicine_cost=10000,
#     electricity_cost=5000,
#     land_lease=10000,
#     months=60,
#     abortion_rate=0.03
# ):
#     current_sows = total_sows
#     monthly_data = []
# 
#     # Depreciation
#     shed_dep_rate = 1 / (shed_life_years * 12)
#     sow_dep_rate = 1 / (sow_life_years * 12)
# 
#     # Loan calculation
#     total_months = loan_tenure_years * 12
#     monthly_rate = interest_rate / 12
#     emi = 0
#     if loan_amount > 0 and total_months > 0:
#         emi = loan_amount * monthly_rate * (1 + monthly_rate)**total_months / ((1 + monthly_rate)**total_months - 1)
#     loan_balance = loan_amount
# 
#     # Calculate sows to mate dynamically
#     # Assuming average cycle length = Gestation (3.8 months) + Lactation (1.3 months) + Dry period (0.33 months) = 5.43 months
#     average_cycle_length = 3.8 + 1.3 + 0.33
#     sows_to_mate_per_month = total_sows / average_cycle_length
# 
#     batches = []
#     ready_for_sale_batches = [] # To temporarily hold batches ready for sale
# 
#     # Calculate total capital invested
#     total_capital_invested = shed_cost + sow_cost
#     cumulative_cash_flow = -total_capital_invested # Start with initial investment as negative cash flow
# 
#     for month in range(1, months + 1):
#         # Initialize monthly counters for sow events
#         sows_mated_this_month = 0
#         sows_aborted_this_month = 0
#         sow_mortality_this_month = 0
# 
#         sow_feed_cost = current_sows * sow_feed_intake * 30 * sow_feed_price
#         staff_cost = supervisor_salary + n_workers * worker_salary
#         mgmt_fixed = management_fee
# 
#         # Mate sows based on dynamic calculation and abortion rate, starting from month 2
#         if month >= 2:
#             sows_to_mate = sows_to_mate_per_month # Keep as decimal
#             sows_mated_this_month = sows_to_mate # Track sows mated
#             sows_pregnant = sows_to_mate * (1 - abortion_rate) # Keep as decimal
#             sows_aborted_this_month = sows_to_mate - sows_pregnant # Track abortions
# 
#             # Sow mortality (calculated monthly)
#             sow_mortality_this_month = current_sows * (sow_mortality / 12)
#             current_sows -= sow_mortality_this_month # Reduce current sows due to mortality
# 
# 
#             if sows_pregnant > 0:
#                 farrow_month = month + 4
#                 wean_month = farrow_month + 1
#                 grower_start_month = wean_month
#                 grower_end_month = grower_start_month + 6 # Grower period is 6 months
#                 piglets = sows_pregnant * piglets_per_cycle * (1 - piglet_mortality)
#                 batches.append({
#                     'batch_id': len(batches) + 1, # Assign a unique ID to each batch
#                     'farrow_month': farrow_month,
#                     'wean_month': wean_month,
#                     'grower_start_month': grower_start_month,
#                     'grower_end_month': grower_end_month,
#                     'piglets': piglets,
#                     'grower_feed_per_month': (piglets * fcr * final_weight) / 6 # Feed for 6 months
#                 })
# 
#         # Initialize counters for the current month (other than sow events)
#         piglets_with_sow = 0
#         current_growers = 0
#         sold_pigs = 0
#         revenue = 0
#         grower_feed_cost = 0
# 
#         batches_to_remove_permanently = [] # Batches that are sold are removed permanently
# 
# 
#         # Identify batches currently in different stages and sum up counts/costs
#         batches_this_month = batches.copy() # Work on a copy to avoid issues while removing
# 
#         for batch in batches_this_month:
#             # Piglets in lactation
#             if batch['farrow_month'] <= month < batch['wean_month']:
#                 piglets_with_sow += batch['piglets']
#             # Growers
#             if batch['grower_start_month'] <= month < batch['grower_end_month']:
#                 current_growers += batch['piglets']
#                 grower_feed_cost += batch['grower_feed_per_month'] * grower_feed_price
#             # Identify batches ready for sale this month
#             if batch['grower_end_month'] == month:
#                  ready_for_sale_batches.append(batch)
# 
# 
#         # Implement bimonthly sale logic starting from month 13
#         if month >= 13 and (month - 13) % 2 == 0 and ready_for_sale_batches:
#             pigs_sold_this_period = 0
#             batches_sold_this_period_ids = [] # Track IDs of batches sold
# 
#             # Find batches that were ready for sale in the last two months (current month and previous month)
#             sale_period_start_month = month - 1 if month > 13 else 13 # For month 13, start from month 13
#             sale_period_end_month = month
# 
#             batches_to_sell_in_this_period = [batch for batch in ready_for_sale_batches if batch['grower_end_month'] >= sale_period_start_month and batch['grower_end_month'] <= sale_period_end_month]
# 
# 
#             for batch_to_sell in batches_to_sell_in_this_period:
#                  pigs_sold_batch = batch_to_sell['piglets'] * (1 - 0.03) # Apply piglet mortality to pigs ready for sale
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch_to_sell['batch_id'])
# 
# 
#             revenue += pigs_sold_this_period * final_weight * sale_price
#             sold_pigs = pigs_sold_this_period
# 
#             # Remove batches that were sold from the ready_for_sale_batches list
#             ready_for_sale_batches = [batch for batch in ready_for_sale_batches if batch['batch_id'] not in batches_sold_this_period_ids]
# 
#             # Mark the sold batches for permanent removal from the main batches list
#             for batch_id in batches_sold_this_period_ids:
#                 for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Handle remaining growers in the final month
#         if month == months and batches:
#              pigs_sold_this_period = 0
#              batches_sold_this_period_ids = []
#              for batch in batches:
#                  pigs_sold_batch = batch['piglets'] * (1 - 0.03) # Apply piglet mortality to all remaining pigs
#                  pigs_sold_this_period += pigs_sold_batch
#                  batches_sold_this_period_ids.append(batch['batch_id'])
# 
#              last_month_grower_revenue = pigs_sold_this_period * final_weight * sale_price
#              revenue += last_month_grower_revenue
#              sold_pigs += pigs_sold_this_period # Add to sold pigs for this month
# 
#              for batch_id in batches_sold_this_period_ids:
#                  for batch in batches:
#                     if batch['batch_id'] == batch_id:
#                          batches_to_remove_permanently.append(batch)
#                          break # Found the batch, move to next id
# 
# 
#         # Remove sold batches permanently from the main batches list
#         for batch in batches_to_remove_permanently:
#             if batch in batches:
#                 batches.remove(batch)
# 
# 
#         # Subtract sold pigs from the total grower count for this month AFTER calculating current_growers
#         current_growers -= sold_pigs
# 
# 
#         mgmt_comm_cost = revenue * management_commission
#         other_fixed = medicine_cost + electricity_cost + land_lease
#         total_operating_cost = sow_feed_cost + grower_feed_cost + staff_cost + mgmt_fixed + mgmt_comm_cost + other_fixed
#         dep = (shed_cost * shed_dep_rate) + (sow_cost * sow_dep_rate)
# 
# 
#         # Loan EMI
#         if month <= moratorium_months:
#             loan_payment = loan_balance * monthly_rate
#         elif month <= total_months:
#             interest = loan_balance * monthly_rate
#             principal = emi - interest
#             loan_balance -= principal
#             loan_payment = emi
#         else:
#             loan_payment = 0
# 
#         monthly_profit = revenue - total_operating_cost - dep - loan_payment
#         monthly_profit_percentage = (monthly_profit / revenue * 100) if revenue > 0 else 0
# 
#         # Calculate monthly cash flow (excluding depreciation)
#         monthly_cash_flow = revenue - total_operating_cost - loan_payment
#         cumulative_cash_flow += monthly_cash_flow
# 
# 
#         monthly_data.append({
#             'Month': month,
#             'Piglets_Born_Alive': piglets_with_sow,
#             'Growers': current_growers,
#             'Sold_Pigs': sold_pigs,
#             'Sows_Mated': sows_mated_this_month,
#             'Revenue': round(revenue),
#             'Sow_Feed_Cost': round(sow_feed_cost),
#             'Grower_Feed_Cost': round(grower_feed_cost),
#             'Staff_Cost': round(staff_cost),
#             'Mgmt_Fee': round(mgmt_fixed),
#             'Mgmt_Comm': round(mgmt_comm_cost),
#             'Other_Fixed_Costs': round(other_fixed),
#             'Total_Operating_Cost': round(total_operating_cost),
#             'Depreciation': round(dep),
#             'Loan_EMI': round(loan_payment),
#             'Monthly_Profit': round(monthly_profit),
#             'Monthly_Profit_%': monthly_profit_percentage,
#             'Monthly_Cash_Flow': round(monthly_cash_flow),
#             'Cumulative_Cash_Flow': round(cumulative_cash_flow)
#         })
# 
# 
#     df_month = pd.DataFrame(monthly_data)
#     df_month['Year'] = ((df_month['Month'] - 1) // 12) + 1
# 
#     # Calculate remaining value of shed and sows
#     remaining_shed_life_months = max(0, (shed_life_years * 12) - months)
#     remaining_sow_life_months = max(0, (sow_life_years * 12) - months)
# 
#     remaining_shed_value = shed_cost * (remaining_shed_life_months / (shed_life_years * 12)) if (shed_life_years * 12) > 0 else 0
#     remaining_sow_value = sow_cost * (remaining_sow_life_months / (sow_life_years * 12)) if (sow_life_years * 12) > 0 else 0
# 
#     remaining_asset_value = remaining_shed_value + remaining_sow_value
# 
#     # Add remaining asset value to the final cumulative cash flow
#     cumulative_cash_flow_with_assets = cumulative_cash_flow + remaining_asset_value
# 
# 
#     # Monthly summary - Apply styling after all calculations
#     # Streamlit doesn't directly support pandas Styler objects for display
#     # We will return the raw dataframe and handle display in Streamlit
#     df_month_display = df_month.copy()
# 
# 
#     # Yearly summary
#     cols_to_sum = ['Revenue','Sow_Feed_Cost','Grower_Feed_Cost','Staff_Cost','Mgmt_Fee','Mgmt_Comm',
#                    'Other_Fixed_Costs','Total_Operating_Cost','Depreciation','Loan_EMI', 'Piglets_Born_Alive', 'Sold_Pigs', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Sows_Mated']
# 
#     df_year = df_month.groupby('Year')[cols_to_sum].sum()
# 
#     # Get the 'Growers' value from the last month of each year
#     growers_end_of_year = df_month.groupby('Year')['Growers'].tail(1).values
#     df_year['Growers'] = growers_end_of_year
# 
#     # Get the 'Cumulative_Cash_Flow' value from the last month of each year
#     cumulative_cash_flow_end_of_year = df_month.groupby('Year')['Cumulative_Cash_Flow'].tail(1).values
#     df_year['Cumulative_Cash_Flow'] = cumulative_cash_flow_end_of_year
# 
#     df_year.index = [f'Year {i}' for i in df_year.index]
#     df_year['Cash_Profit'] = df_year['Revenue'] - df_year['Total_Operating_Cost']
#     df_year['Profit_After_Dep_Loan'] = df_year['Cash_Profit'] - df_year['Depreciation'] - df_year['Loan_EMI']
#     df_year['Cash_Profit_%'] = (df_year['Cash_Profit'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
#     df_year['Profit_After_Dep_Loan_%'] = (df_year['Profit_After_Dep_Loan'] / df_year['Revenue'] * 100).round() if df_year['Revenue'].sum() > 0 else 0
# 
#     # Add Total Capital Invested column
#     df_year['Total Capital Invested'] = total_capital_invested
# 
# 
#     return df_month_display, df_year, total_capital_invested, cumulative_cash_flow_with_assets, revenue, remaining_sow_value, remaining_shed_value
# 
# st.title('Pig Farming Operation Simulator')
# st.write('Use the sliders and number inputs in the sidebar to adjust the simulation parameters and see the financial results.')
# 
# 
# st.sidebar.header('Simulation Parameters')
# 
# # Define widgets for each parameter
# total_sows = st.sidebar.slider('Total Sows', min_value=10, max_value=200, value=30, step=5)
# piglets_per_cycle = st.sidebar.slider('Piglets Per Cycle', min_value=5.0, max_value=15.0, value=8.0, step=0.1)
# sow_mortality = st.sidebar.slider('Sow Mortality Rate', min_value=0.0, max_value=0.5, value=0.033, step=0.001, format="%.3f")
# piglet_mortality = st.sidebar.slider('Piglet Mortality Rate', min_value=0.0, max_value=0.5, value=0.03, step=0.001, format="%.3f")
# abortion_rate = st.sidebar.slider('Abortion Rate', min_value=0.0, max_value=0.5, value=0.03, step=0.001, format="%.3f")
# 
# st.sidebar.header('Feed and Sale Parameters')
# sow_feed_price = st.sidebar.number_input('Sow Feed Price (per kg)', min_value=0, max_value=50, value=32, step=1)
# sow_feed_intake = st.sidebar.slider('Sow Feed Intake (kg/day)', min_value=0.0, max_value=5.0, value=2.8, step=0.1)
# grower_feed_price = st.sidebar.number_input('Grower Feed Price (per kg)', min_value=0, max_value=50, value=28, step=1)
# fcr = st.sidebar.slider('Feed Conversion Ratio (FCR)', min_value=2.0, max_value=4.0, value=3.2, step=0.01, format="%.2f")
# final_weight = st.sidebar.number_input('Final Weight (kg)', min_value=80, max_value=120, value=105, step=1)
# sale_price = st.sidebar.number_input('Sale Price (per kg)', min_value=100, max_value=300, value=180, step=5)
# 
# st.sidebar.header('Management and Staff Costs')
# management_fee = st.sidebar.number_input('Management Fee (Monthly)', min_value=0, max_value=200000, value=50000, step=10000)
# management_commission = st.sidebar.slider('Management Commission Rate', min_value=0.0, max_value=0.2, value=0.05, step=0.001, format="%.3f")
# supervisor_salary = st.sidebar.number_input('Supervisor Salary (Monthly)', min_value=0, max_value=50000, value=25000, step=1000)
# worker_salary = st.sidebar.number_input('Worker Salary (Monthly)', min_value=0, max_value=30000, value=18000, step=1000)
# n_workers = st.sidebar.number_input('Number of Workers', min_value=0, max_value=10, value=2)
# 
# st.sidebar.header('Capital Costs')
# shed_cost = st.sidebar.number_input('Shed Cost', min_value=500000, max_value=5000000, value=1000000, step=100000)
# shed_life_years = st.sidebar.number_input('Shed Life (Years)', min_value=1, max_value=30, value=10)
# sow_cost = st.sidebar.number_input('Sow Cost (per sow)', min_value=500000, max_value=3000000, value=1050000, step=100000)
# sow_life_years = st.sidebar.number_input('Sow Life (Years)', min_value=1, max_value=10, value=4)
# 
# st.sidebar.header('Loan Parameters')
# loan_amount = st.sidebar.number_input('Loan Amount', min_value=0, max_value=10000000, value=0, step=100000)
# interest_rate = st.sidebar.slider('Interest Rate (Annual)', min_value=0.0, max_value=0.2, value=0.1, step=0.001, format="%.3f")
# loan_tenure_years = st.sidebar.number_input('Loan Tenure (Years)', min_value=1, max_value=20, value=5)
# moratorium_months = st.sidebar.number_input('Moratorium Period (Months)', min_value=0, max_value=24, value=0)
# 
# st.sidebar.header('Other Fixed Costs')
# medicine_cost = st.sidebar.number_input('Medicine Cost (Monthly)', min_value=0, max_value=50000, value=10000, step=1000)
# electricity_cost = st.sidebar.number_input('Electricity Cost (Monthly)', min_value=0, max_value=50000, value=5000, step=1000)
# land_lease = st.sidebar.number_input('Land Lease (Monthly)', min_value=0, max_value=50000, value=10000, step=1000)
# 
# st.sidebar.header('Simulation Duration')
# months = st.sidebar.slider('Simulation Duration (Months)', min_value=12, max_value=120, value=60, step=12)
# 
# # Pass widget values to the simulator function
# df_month, df_year, total_capital_invested, cumulative_cash_flow_with_assets, last_month_revenue, remaining_sow_value, remaining_shed_value = sow_rotation_simulator_with_stages(
#     total_sows=total_sows,
#     piglets_per_cycle=piglets_per_cycle,
#     sow_mortality=sow_mortality,
#     piglet_mortality=piglet_mortality,
#     sow_feed_price=sow_feed_price,
#     sow_feed_intake=sow_feed_intake,
#     grower_feed_price=grower_feed_price,
#     fcr=fcr,
#     final_weight=final_weight,
#     sale_price=sale_price,
#     management_fee=management_fee,
#     management_commission=management_commission,
#     supervisor_salary=supervisor_salary,
#     worker_salary=worker_salary,
#     n_workers=n_workers,
#     shed_cost=shed_cost,
#     shed_life_years=shed_life_years,
#     sow_cost=sow_cost,
#     sow_life_years=sow_life_years,
#     loan_amount=loan_amount,
#     interest_rate=interest_rate,
#     loan_tenure_years=loan_tenure_years,
#     moratorium_months=moratorium_months,
#     medicine_cost=medicine_cost,
#     electricity_cost=electricity_cost,
#     land_lease=land_lease,
#     months=months,
#     abortion_rate=abortion_rate
# )
# 
# # Display results
# st.header("Simulation Results")
# 
# st.subheader("Monthly Summary")
# # Format currency columns for display
# currency_cols_month = ['Revenue', 'Sow_Feed_Cost', 'Grower_Feed_Cost', 'Staff_Cost', 'Mgmt_Fee', 'Mgmt_Comm', 'Other_Fixed_Costs', 'Total_Operating_Cost', 'Depreciation', 'Loan_EMI', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Cumulative_Cash_Flow']
# for col in currency_cols_month:
#     # Check if the column exists before applying formatting
#     if col in df_month.columns:
#         df_month[col] = df_month[col].apply(lambda x: f'₹{x:,.2f}' if pd.notnull(x) else '')
# st.dataframe(df_month)
# 
# st.subheader("Yearly Summary")
# # Format currency columns for display
# currency_cols_year = ['Revenue', 'Sow_Feed_Cost', 'Grower_Feed_Cost', 'Staff_Cost', 'Mgmt_Fee', 'Mgmt_Comm', 'Other_Fixed_Costs', 'Total_Operating_Cost', 'Depreciation', 'Loan_EMI', 'Monthly_Profit', 'Monthly_Cash_Flow', 'Cumulative_Cash_Flow', 'Cash_Profit', 'Profit_After_Dep_Loan', 'Total Capital Invested']
# for col in currency_cols_year:
#      # Check if the column exists before applying formatting
#     if col in df_year.columns:
#         df_year[col] = df_year[col].apply(lambda x: f'₹{x:,.2f}' if pd.notnull(x) else '')
# 
# st.dataframe(df_year)
# 
# st.subheader("Financial Summary")
# st.write(f"Total Capital Initially Invested: ₹{total_capital_invested:,.2f}")
# st.write(f"Cumulative Cash Flow after {months} months: ₹{cumulative_cash_flow_with_assets:,.2f}")
# 
# # Calculate ROI
# roi = (cumulative_cash_flow_with_assets / total_capital_invested) * 100 if total_capital_invested > 0 else 0
# st.write(f"Return on Investment (ROI): {roi:.2f}%")

"""## Run streamlit app

### Subtask:
Provide instructions on how to run the Streamlit application from the terminal.

## Summary:

### Data Analysis Key Findings

*   The Streamlit application was successfully created in `app.py`.
*   Necessary libraries (`streamlit`, `pandas`, `numpy`) and the core simulation logic (`sow_rotation_simulator_with_stages` function) were integrated into the application script.
*   Streamlit sidebar widgets were added for all simulation parameters, allowing interactive adjustment of inputs like `Total Sows`, `Piglets Per Cycle`, various mortality rates, feed prices, FCR, sale price, management costs, capital costs (shed and sow), loan parameters, and other fixed costs.
*   The simulation function was successfully called using the values dynamically retrieved from the Streamlit input widgets.
*   The simulation results, including detailed monthly and yearly financial summaries, total capital invested, cumulative cash flow, and calculated Return on Investment (ROI), are now displayed in the main area of the Streamlit application.
*   Currency columns in the displayed dataframes are formatted in INR (₹) with comma separators for readability.
*   A title ("Pig Farming Operation Simulator") and brief instructions on using the sidebar have been added to the application interface.

### Insights or Next Steps

*   Implement data visualization (e.g., line plots for cumulative cash flow, bar charts for yearly profits) to provide a more intuitive understanding of the simulation results over time.
*   Add more detailed breakdown tables or expandable sections in the Streamlit app to allow users to dive deeper into specific cost categories or production metrics if needed.
"""





